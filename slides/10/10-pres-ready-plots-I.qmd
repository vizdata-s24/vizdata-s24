---
title: Presentation ready plots I
subtitle: Lecture 10
title-slide-attributes:
  data-background-image: ../vizdata-bg.png
  data-background-size: stretch
  data-slide-number: none
format: revealjs
editor_options: 
  chunk_output_type: console
---

# Warm up

## Announcements {.smaller}

-   ...

## Setup

```{r}
#| label: setup
#| message: false

# load packages
library(countdown)
library(tidyverse)
library(ggrepel)
library(patchwork)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# no plot sizing defaults for this slide deck
```

# Telling a story

## Multiple ways of telling a story

-   Sequential plots: Motivation, then resolution

-   A single plot: Resolution, and hidden in it motivation

::: {.callout-note appearance="minimal"}
**Project note:** you're asked to create two plots per question. One possible approach: Start with a plot showing the raw data, and show derived quantities (e.g. percent increases, averages, coefficients of fitted models) in the subsequent plot.
:::

## Simplicity vs. complexity

> When you're trying to show too much data at once you may end up not showing anything.

-   Never assume your audience can rapidly process complex visual displays

-   Don't add variables to your plot that are tangential to your story

-   Don't jump straight to a highly complex figure; first show an easily digestible subset (e.g., show one facet first)

-   Aim for memorable, but clear

::: {.callout-note appearance="minimal"}
**Project note:** Make sure to leave time to iterate on your plots after you practice your presentation. If certain plots are getting too wordy to explain, take time to simplify them!
:::

## Consistency vs. repetitiveness

> Be consistent but don't be repetitive.

-   Use consistent features throughout plots (e.g., same color represents same level on all plots)

-   Aim to use a different type of visualization for each distinct analysis

::: aside
**Project note:** If possible, ask a friend who is not in the class to listen to your presentation and then ask them what they remember. Then, ask yourself: is that what you wanted them to remember?
:::

# Designing effective visualizations

## Keep it simple

::: columns
::: {.column width="50%"}
![](images/pie.jpg)
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"

d <- tribble(
  ~category,                     ~value,
  "Cutting tools"                , 0.03,
  "Buildings and administration" , 0.22,
  "Labor"                        , 0.31,
  "Machinery"                    , 0.27,
  "Workplace materials"          , 0.17
)
ggplot(d, aes(y = fct_reorder(category, value), x = value)) +
  geom_col() +
  labs(x = NULL, y = NULL)
```
:::
:::

## Judging relative area

![](images/pie-areas.png){fig-align="center" width="900"}

. . .

![](images/bar-areas.png){fig-align="center" width="900"}

::: aside
From Data to Viz caveat collection - [The issue with pie chart](https://www.data-to-viz.com/caveat/pie.html)
:::

## Use color to draw attention

<br/> <br/>

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"

d |>
  mutate(category = str_replace(category, " ", "\n")) |>
  ggplot(aes(x = category, y = value, fill = category)) +
    geom_col() +
    labs(x = NULL, y = NULL) +
    theme(legend.position = "none")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"

ggplot(d, aes(y = fct_reorder(category, value), x = value, fill = category)) +
  geom_col() +
  labs(x = NULL, y = NULL) +
  scale_fill_manual(values = c("red", rep("gray", 4))) +
  theme(legend.position = "none")
```
:::
:::

## Tell a story

::: columns
::: {.column width="50%"}
![](images/duke-hires-1.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/duke-hires-2.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Leave out non-story details

::: columns
::: {.column width="50%"}
![](images/too-many-details.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/fewer-details.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Order matters

::: columns
::: {.column width="50%"}
![](images/unordered.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/ordered.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Clearly indicate missing data

![](images/missing-data.png){fig-align="center"}

::: aside
http://ivi.sagepub.com/content/10/4/271, Angela Zoss and Eric Monson, Duke DVS
:::

## Reduce cognitive load

![](images/cognitive-load.png){fig-align="center"}

::: aside
http://www.storytellingwithdata.com/2012/09/some-finer-points-of-data-visualization.html
:::

## Use descriptive titles

::: columns
::: {.column width="50%"}
![](images/title-non-descriptive.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/title-descriptive.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Annotate figures

![](images/annotate.png){fig-align="center"}

::: aside
https://bl.ocks.org/susielu/23dc3082669ee026c552b85081d90976
:::

# Project workflow overview

## First, some AInspiration

<br><br>

::: task
Visualize the data at [\[url\]](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-21/bob_ross.csv) using ggplot2.
:::

## Demo {.smaller}

`project-1`

-   Rendering individual documents
-   Write-up:
    -   Cross referencing
    -   Citations
-   Presentation:
    -   Pauses
    -   Smaller text
-   Website: `https://vizdata-s24.github.io/project-1-YOUR_TEAM_NAME/`
    -   Rendering site
    -   Making sure your website reflects your latest changes
    -   Customizing the look of your website

# Plot layout

## Sample plots

```{r}
#| fig-show: hide

p_hist <- ggplot(mtcars, aes(x = mpg)) +
  geom_histogram(binwidth = 2)
p_box <- ggplot(mtcars, aes(x = factor(vs), y = mpg)) +
  geom_boxplot()
p_scatter <- ggplot(mtcars, aes(x = disp, y = mpg)) +
  geom_point()
p_text <- mtcars |>
  rownames_to_column() |>
  ggplot(aes(x = disp, y = mpg)) +
  geom_text_repel(aes(label = rowname)) +
  coord_cartesian(clip = "off")
```

## Slide with single plot, little text

The plot will fill the empty space in the slide.

```{r}
p_hist
```

## Slide with single plot, lots of text

-   If there is more text on the slide

-   The plot will shrink

-   To make room for the text

```{r}
p_hist
```

## Small `fig-width`

For a zoomed-in look

```{r}
#| echo: fenced
#| fig-width: 3
#| fig-asp: 0.618

p_hist
```

## Large `fig-width`

For a zoomed-out look

```{r}
#| echo: fenced
#| fig-width: 10
#| fig-asp: 0.618

p_hist
```

## `fig-width` affects text size

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-width: 5
#| fig-asp: 0.618

p_text +
  labs(title = "fig.width = 5")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 10
#| fig-asp: 0.618

p_text +
  labs(title = "fig.width = 10")
```
:::
:::

## Multiple plots on a slide

::: {.callout-warning appearance="minimal"}
First, ask yourself, must you include multiple plots on a slide? For example, is your narrative about comparing results from two plots?
:::

-   If no, then don't! Move the second plot to to the next slide!

-   If yes,

    -   Insert columns using the Insert anything tool

    -   Use `layout-ncol` chunk option

    -   Use the patchwork package

    -   Possibly, use pivoting to reshape your data and then use facets

## Columns

> Insert \> Slide Columns

Quarto will automatically resize your plots to fit side-by-side.

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 5
#| fig-asp: 0.618

p_hist
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 5
#| fig-asp: 0.618

p_scatter
```
:::
:::

## `layout-ncol`

```{r}
#| echo: fenced
#| fig-width: 5
#| fig-asp: 0.618
#| layout-ncol: 2

p_hist
p_scatter
```

## patchwork

```{r}
#| echo: fenced
#| fig-width: 7
#| fig-asp: 0.4

p_hist + p_scatter
```

## patchwork layout I

```{r}
#| warning: false

(p_hist + p_box) /
  (p_scatter + p_text)
```

## patchwork layout II

```{r}
#| warning: false

p_text / (p_hist + p_box + p_scatter)
```

## patchwork layout III

```{r}
#| warning: false

p_text + p_hist + p_box + p_scatter + 
  plot_annotation(title = "mtcars", tag_levels = c("A"))
```

## patchwork layout IV {.smaller}

```{r}
#| warning: false

p_text + {
  p_hist + {
    p_box + p_scatter + plot_layout(ncol = 1) + plot_layout(tag_level = 'new')
  }
} + 
  plot_layout(ncol = 1) +
  plot_annotation(tag_levels = c("1","a"), tag_prefix = "Fig ")
```

## More patchwork

<br>

Learn more at [https://patchwork.data-imaginist.com](https://patchwork.data-imaginist.com/).

## Want to replicate something you saw in my slides?

<br>

Look into the source code at <https://github.com/vizdata-s24/vizdata-s24/tree/main/slides>.
