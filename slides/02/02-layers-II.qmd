---
title: Deep dive into ggplot2 layers - II
subtitle: Lecture 2
title-slide-attributes:
  data-background-image: ../vizdata-bg.png
  data-background-size: stretch
  data-slide-number: none
format: revealjs
editor_options: 
  chunk_output_type: console
---

# Warm up

## Announcements

-   Thank you for filling out the survey!

-   At this point everyone should be:

    -   On Slack, in public channels for #general, #homework, #project-1, #project-2, #quizzes, and #random as well as in a private channel for their lab section.
    -   Make sure your profile photo/avatar and name matches between GitHub and Slack.

-   Reading Quiz 1 posted, due next Tuesday at 10 am (before class).

## Setup {.smaller}

```{r}
#| label: setup
#| message: false

# load packages
library(tidyverse)
library(openintro)
library(countdown)
library(palmerpenguins)
library(ggrepel)
library(waffle)
library(scales)
library(ggthemes)
library(ThemePark) # devtools::install_github("MatthewBJane/ThemePark")
library(duke) # devtools::install_github("aidangildea/duke")
library(tidykids) # devtools::install_github("jrosen48/tidykids")

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

## From last time {.smaller}

```{r}
#| label: data-prep

duke_forest <- duke_forest |>
  mutate(
    decade_built = (year_built %/% 10) * 10,
    decade_built_cat = case_when(
      decade_built <= 1940 ~ "1940 or before",
      decade_built >= 1990 ~ "1990 or after",
      TRUE ~ as.character(decade_built)
    )
  )

mean_area_decade <- duke_forest |>
  group_by(decade_built_cat) |>
  summarise(mean_area = mean(area))

mean_area_decade
```

# Geoms

## Geoms

-   Geometric objects, or **geoms** for short, perform the actual rendering of the layer, controlling the type of plot that you create

-   You can think of them as "the geometric shape used to represent the data"

## One variable

-   Discrete:

    -   `geom_bar()`: display distribution of discrete variable.

-   Continuous

    -   `geom_histogram()`: bin and count continuous variable, display with bars

    -   `geom_density()`: smoothed density estimate

    -   `geom_dotplot()`: stack individual points into a dot plot

    -   `geom_freqpoly()`: bin and count continuous variable, display with lines

## Aside

Always use "typewriter text" (monospace font) when writing function names, and follow with `()`, e.g.,

-   `geom_freqpoly()`

-   `mean()`

-   `lm()`

## `geom_dotplot()` {.smaller}

::: task
What does each point represent? How are their locations determined? What do the x and y axes represent?
:::

```{r}
#| fig-asp: 0.5

ggplot(duke_forest, aes(x = price)) +
  geom_dotplot(binwidth = 50000, dotsize = 0.7)
```

## Comparing across groups {.smaller}

::: task
Which of the following allows for easier comparison across groups?
:::

::: panel-tabset
## Histogram

```{r}
#| fig-asp: 0.4

ggplot(duke_forest, aes(x = price, fill = decade_built_cat)) +
  geom_histogram(binwidth = 100000)
```

## Frequency polygon

```{r}
#| fig-asp: 0.4

ggplot(duke_forest, aes(x = price, color = decade_built_cat)) +
  geom_freqpoly(binwidth = 100000, linewidth = 1)
```
:::

## Two variables - both continuous

-   `geom_point()`: scatterplot

-   `geom_quantile()`: smoothed quantile regression

-   `geom_rug()`: marginal rug plots

-   `geom_smooth()`: smoothed line of best fit

-   `geom_text()`: text labels

## Application exercise - Part 1

::: task
-   Go to the course GitHub organization: <https://github.com/vizdata-s24>

-   Clone the repo called `ae-02-[YOUR-GITHUB-USERNAME]` and work on the exercises for Part 1.

-   Once you're done, share your plots on Slack in #general.

-   Label your chunk(s) and pay attention to code style and formatting!
:::

```{r}
#| echo: false

countdown(minutes = 10, color_background = "white")
```

## Two variables - show density

-   `geom_bin2d()`: bin into rectangles and count

-   `geom_density2d()`: smoothed 2d density estimate

-   `geom_hex()`: bin into hexagons and count

## `geom_hex()`

Not very helpful for `r nrow(duke_forest)` observations:

```{r}
ggplot(duke_forest, aes(x = area, y = price)) +
  geom_hex()
```

## `geom_hex()`

More helpful for `r nrow(diamonds)` observations:

```{r}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_hex()
```

## `geom_hex()`

(Maybe) even more helpful on the (natural) log scale:

```{r}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_hex() +
  scale_fill_gradient(trans = "log")
```

## `geom_hex()` and warnings

-   Requires installing the [**hexbin**](https://cran.r-project.org/web/packages/hexbin/index.html) package separately!

```{r}
#| eval: false

install.packages("hexbin")
```

-   Otherwise you might see

```         
Warning: Computation failed in `stat_binhex()`
```

## Two variables

-   At least one discrete
    -   `geom_count()`: count number of point at distinct locations
    -   `geom_jitter()`: randomly jitter overlapping points
-   One continuous, one discrete
    -   `geom_col()`: a bar chart of pre-computed summaries
    -   `geom_boxplot()`: boxplots
    -   `geom_violin()`: show density of values in each group

## `geom_jitter()` {.smaller}

::: task
How are the following three plots different?
:::

::: panel-tabset
## Plot A

```{r}
#| fig-asp: 0.4

ggplot(duke_forest, aes(x = bed, y = price)) +
  geom_point()
```

## Plot B

```{r}
#| fig-asp: 0.4

ggplot(duke_forest, aes(x = bed, y = price)) +
  geom_jitter()
```

## Plot C

```{r}
#| fig-asp: 0.4

ggplot(duke_forest, aes(x = bed, y = price)) +
  geom_jitter()
```
:::

## `geom_jitter()` and `set.seed()` {.smaller}

::: panel-tabset
## Plot A

```{r}
#| fig-asp: 0.4

set.seed(1234)

ggplot(duke_forest, aes(x = bed, y = price)) +
  geom_jitter()
```

## Plot B

```{r}
#| fig-asp: 0.4

set.seed(1234)

ggplot(duke_forest, aes(x = bed, y = price)) +
  geom_jitter()
```
:::

## Two variables {.smaller}

-   One time, one continuous
    -   `geom_area()`: area plot
    -   `geom_line()`: line plot
    -   `geom_step()`: step plot
-   Display uncertainty:
    -   `geom_crossbar()`: vertical bar with center
    -   `geom_errorbar()`: error bars
    -   `geom_linerange()`: vertical line
    -   `geom_pointrange()`: vertical line with center
-   Spatial
    -   `geom_sf()`: for map data (more on this later...)

## Average price per year built {.smaller}

```{r}
mean_price_year <- duke_forest |>
  group_by(year_built) |>
  summarize(
    n = n(),
    mean_price = mean(price),
    sd_price = sd(price)
  )

mean_price_year
```

## `geom_line()`

```{r}
ggplot(mean_price_year, aes(x = year_built, y = mean_price)) +
  geom_line()
```

## `geom_area()`

```{r}
ggplot(mean_price_year, aes(x = year_built, y = mean_price)) +
  geom_area()
```

## `geom_step()`

```{r}
ggplot(mean_price_year, aes(x = year_built, y = mean_price)) +
  geom_step()
```

## Application exercise - Part 2

::: task
-   Go to the course GitHub organization: <https://github.com/vizdata-s24>

-   Clone the repo called `ae-02-[YOUR-GITHUB-USERNAME]` and work on the exercises for Part 2.

-   Once you're done, share your plot on Slack in #general.

-   Label your chunk(s) and pay attention to code style and formatting!
:::

```{r}
#| echo: false

countdown(minutes = 5, color_background = "white")
```

##  {.center}

::: {.hand .large}
let's clean things up a bit!
:::

## Let's clean things up a bit!

::: panel-tabset
## Code

```{r}
#| ref.label: clean-up
#| echo: false
#| fig-asp: 0.5
```

## Plot

```{r}
#| label: clean-up
#| code-line-numbers: "|3-4"
#| fig-show: hide

ggplot(duke_forest, aes(x = area, y = price)) +
  geom_point(alpha = 0.6, size = 2, color = "#012169") +
  scale_x_continuous(labels = label_number(big.mark = ",")) +
  scale_y_continuous(labels = label_dollar(scale = 1/1000, suffix = "K")) +
  labs(
    x = "Area (square feet)",
    y = "Sale price (USD)",
    title = "Sale prices of homes in Duke Forest",
    subtitle = "As of November 2020",
    caption = "Source: Zillow.com"
  )
```
:::

## Three variables

-   `geom_contour()`: contours
-   `geom_tile()`: tile the plane with rectangles
-   `geom_raster()`: fast version of `geom_tile()` for equal sized tiles

## `geom_tile()`

```{r}
#| fig-asp: 0.5
#| fig-width: 8

ggplot(duke_forest, aes(x = bed, y = bath)) +
  geom_tile(aes(fill = price)) +
  scale_fill_continuous(labels = label_dollar())
```

# Themes

## Complete themes {.smaller}

```{r}
#| message: false
#| warning: false
#| layout-ncol: 3

p <- ggplot(duke_forest, aes(x = area, y = price)) +
  geom_point(alpha = 0.6, size = 2)

p + theme_gray() + labs(title = "Gray")
p + theme_void() + labs(title = "Void")
p + theme_dark() + labs(title = "Dark")
```

## Themes from ggthemes {.smaller}

```{r}
#| message: false
#| warning: false
#| layout-ncol: 3

p + theme_fivethirtyeight() + labs(title = "FiveThirtyEight")
p + theme_economist() + labs(title = "Economist")
p + theme_wsj() + labs(title = "Wall Street Journal")
```

## Themes and color scales from **ggthemes**

```{r}
#| message: false
#| warning: false

p + 
  aes(color = decade_built_cat) +
  scale_color_wsj() +
  theme_wsj() + 
  labs(title = "Wall Street Journal")
```

## Themes from **ThemePark** {.smaller}

```{r}
#| message: false
#| warning: false
#| layout-ncol: 2

p + 
  geom_point(color = barbie_theme_colors["medium"]) +
  theme_barbie()
p + 
  geom_point(color = gameofthrones_theme_colors["medium"]) +
  theme_gameofthrones(gameofthrones_font = TRUE)
```

## Duke theme! {.smaller}

```{r}
#| fig-asp: 0.5
#| fig-width: 6

p + 
  aes(color = price) +
  theme_duke() +
  theme(legend.position = "none") +
  scale_duke_continuous()
```

## Modifying theme elements {.smaller}

```{r}
#| message: false
#| warning: false
#| fig-asp: 0.5

p + 
  labs(title = "Duke Forest houses") +
  theme(
    plot.title = element_text(color = "red", face = "bold", family = "Comic Sans MS"),
    plot.background = element_rect(color = "red", fill = "mistyrose")
  )
```

# Axes

## Axis breaks {.smaller}

::: task
How can the following figure be improved with custom breaks in axes, if at all?
:::

::: panel-tabset
## Plot

```{r}
#| ref.label: kids-plot
#| echo: false
#| fig-asp: 0.4
```

## Code

```{r}
#| label: kids-plot
#| fig-show: hide

kids_plot <- tidykids |>
  mutate(year = as.numeric(year)) |>
  filter(
    state %in% c("North Carolina", "California", "Florida"),
    variable == "pubhealth"
  ) |>
  ggplot(aes(x = year, y = inf_adj_perchild, color = state, linetype = state)) +
  geom_smooth(se = FALSE) +
  scale_color_colorblind() +
  theme(legend.position = c(0.15, 0.8))

kids_plot
```
:::

## Context matters

```{r}
#| message: false
#| warning: false
#| fig-asp: 0.5
#| code-line-numbers: "2"

kids_plot +
  scale_x_continuous(breaks = seq(from = 1996, to = 2016, by = 2))
```

## Conciseness matters

```{r}
#| message: false
#| warning: false
#| fig-asp: 0.5
#| code-line-numbers: "2"

kids_plot +
  scale_x_continuous(breaks = seq(from = 1996, to = 2016, by = 4))
```
