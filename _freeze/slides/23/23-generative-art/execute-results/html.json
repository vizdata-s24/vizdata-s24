{
  "hash": "5fb3111049b3dbe5bc89e4269e2459f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Generative art\nsubtitle: Lecture 23\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n# Warm up\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(scico)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# Generative art\n\n## Genesis 338\n\nby Thomas Lin Pedersen\n\n![](images/genesis338.png){fig-align=\"center\"}\n\n[More from Thomas Lin Pedersen](https://www.data-imaginist.com/art)\n\n## Flametree\n\nby Danielle Navarro\n\n![](images/flametree.png){fig-align=\"center\"}\n\n[More from Danielle Navarro](https://art.djnavarro.net/)\n\n## Permutations\n\nby Georgios Karamanis\n\n![](images/permutations.png){fig-align=\"center\"}\n\n[More from Georgios Karamanis](https://karaman.is/)\n\n## Abstractions\n\nby Antonio Sánchez Chinchón\n\n![](images/abstractions.png){fig-align=\"center\"}\n\n[More from Antonio Sánchez Chinchón](https://fronkonstin.com/)\n\n## Generative art: what\n\n> One overly simple but useful definition is that generative art is art programmed using a computer that intentionally introduces randomness as part of its creation process.\n>\n> [Jason Bailey](https://www.artnome.com/news/2018/8/8/why-love-generative-art)\n\n-   There is randomness to the art, introduced by the computer (the code)\n-   The artist has control over the randomness, as contradictory as that may sound\n\n## Generative art: why {.smaller}\n\n-   Why people create generative art pieces?\n    -   Artistic expression\n    -   Leveraging computers to generate randomness\n    -   ...\n\n. . .\n\n-   Why are we learning about generative art?\n    -   A different look at data visualization: not for the meaning in the data, but for the visual itself\n    -   Great way to practice programming, particularly if you're into creating art\n    -   Opportunity to practice problem solving skills, particularly if you're sketching first, then creating or reproducing an existing piece\n\n## Generative art in use: Book covers\n\nJust one of many examples of generative art as a practical solution by the New York Public Library:\n\nTo fill in missing book covers in an ebook-borrowing and reading app\n\n![](images/Generative-book-covers.png){fig-align=\"center\"}\n\n::: aside\nNew York Public Library, [Generative eBook Covers](https://www.nypl.org/blog/2014/09/03/generative-ebook-covers). September 3, 2014.\n:::\n\n# I can plot myself flowers\n\n![](images/flowers.png){fig-alt=\"9 abstract shapes that look like flowers organized in a 3x3 grid\" fig-align=\"center\" width=\"1200\"}\n\n## Let's make a circle\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code}\n# make a circle of points\nt <- seq(0, 2 * pi, length.out = 50)\nx <- sin(t)\ny <- cos(t)\ndf <- tibble(t, x, y)\n\n# plot a circle of points\nggplot(df, aes(x, y)) +\n  geom_point() +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/circle-points-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## The Golden Angle\n\n::: columns\n::: {.column width=\"50%\" fragment-index=\"1\"}\nThe golden angle is the angle subtended by the smaller (red) arc when two arcs that make up a circle are in the golden ratio.\n\n$$ \\pi(3 − \\sqrt{5}) $$\n\n![](images/Golden_Angle.png){fig-align=\"center\" width=\"200\"}\n:::\n\n::: {.column width=\"50%\" fragment-index=\"2\"}\nThe golden angle is the angle separating successive florets on a sunflower.\n\n![](images/Goldener_Schnitt_Blattstand.png){fig-align=\"center\"}\n:::\n:::\n\n::: aside\nWikipedia. [Golden angle](https://en.wikipedia.org/wiki/Golden_angle).\n:::\n\n## Petals with the golden angle {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|1-2|4-5|7-13|15-19\"}\n# set golden angle\nangle <- pi * (3 - sqrt(5))\n\n# set number of points\npoints <- 50\n\n# make data frame\ndf <- tibble(\n  i = 1:points,\n  t = (1:points) * angle,\n  x = sin(t),\n  y = cos(t)\n)\n\n# plot points in a spiral\nggplot(df, aes(x = x * t, y = y * t)) +\n  geom_path(color = \"gray\") +\n  geom_text(aes(label = i)) +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/golden-paths-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Paths to points {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|17\"}\n# set golden angle\nangle <- pi * (3 - sqrt(5))\n\n# set number of points\npoints <- 50\n\n# make data frame\ndf <- tibble(\n  i = 1:points,\n  t = (1:points) * angle,\n  x = sin(t),\n  y = cos(t)\n)\n\n# plot points in a spiral\nggplot(df, aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/golden-points-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Without the background\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|19\"}\n# set golden angle\nangle <- pi * (3 - sqrt(5))\n\n# set number of points\npoints <- 50\n\n# make data frame\ndf <- tibble(\n  i = 1:points,\n  t = (1:points) * angle,\n  x = sin(t),\n  y = cos(t)\n)\n\n# plot points in a spiral\nggplot(df, aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/golden-points-void-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## More points {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\n# set golden angle\nangle <- pi * (3 - sqrt(5))\n\n# set number of points\npoints <- 100\n\n# make data frame\ndf <- tibble(\n  i = 1:points,\n  t = (1:points) * angle,\n  x = sin(t),\n  y = cos(t)\n)\n\n# plot points in a spiral\nggplot(df, aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/golden-points-more-void-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Adjust points {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|10\"}\n# set golden angle\nangle <- pi * (3 - sqrt(5))\n\n# set number of points\npoints <- 100\n\n# make data frame\ndf <- tibble(\n  i = 1:points,\n  t = (1:points) * angle + 20,\n  x = sin(t),\n  y = cos(t)\n)\n\n# plot points in a spiral\nggplot(df, aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/golden-points-more-void-adjust-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n# Formalize a system\n\n## Write a function: `build_art()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuild_art <- function() {\n\n  # set golden angle\n  angle <- pi * (3 - sqrt(5))\n\n  # set number of points\n  points <- 100\n\n  # make data frame\n  tibble(\n    i = 1:points,\n    t = (1:points) * angle + 20,\n    x = sin(t),\n    y = cos(t)\n  )\n}\n```\n:::\n\n\n## Add arguments to `build_art()` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuild_art <- function(points, angle, adjustment) {\n  tibble(\n    i = 1:points,\n    t = (1:points) * angle + adjustment,\n    x = sin(t),\n    y = cos(t)\n  )\n}\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuild_art(\n  angle = pi * (3 - sqrt(5)),\n  points = 100,\n  adjustment = 20\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 4\n       i     t       x       y\n   <int> <dbl>   <dbl>   <dbl>\n 1     1  22.4 -0.398  -0.918 \n 2     2  24.8 -0.327   0.945 \n 3     3  27.2  0.879  -0.476 \n 4     4  29.6 -0.970  -0.243 \n 5     5  32.0  0.551   0.834 \n 6     6  34.4  0.157  -0.988 \n 7     7  36.8 -0.783   0.622 \n 8     8  39.2  0.998   0.0701\n 9     9  41.6 -0.688  -0.726 \n10    10  44.0  0.0173  1.00  \n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n## Use the function {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code}\nbuild_art(\n  angle = pi * (3 - sqrt(5)),\n  points = 100,\n  adjustment = 20\n) |>\n  ggplot(aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/points-100-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Change parameters {.smaller}\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|2-4\"}\nbuild_art(\n  angle = 3,\n  points = 500,\n  adjustment = 0\n) |>\n  ggplot(aes(x = x * t, y = y * t)) +\n  geom_point() +\n  coord_equal() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](23-generative-art_files/figure-revealjs/points-500-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Next steps...\n\n-   Add random noise\n-   Add more customization options\n    -   Size\n    -   Color\n    -   Shape\n    -   ...\n\n## Livecoding\n\n::: task\nGo to `ae-22` and let's make some flowers!\n:::\n\n# Wrap up\n\n## Acknowledgements\n\n-   [Unpredictable paintings](https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/) by Danielle Navarro\n\n-   [Drawing Flowers with R and ggplot2](https://roweyerboat.github.io/drawing_flowers_with_r_and_ggplot2) by Amanda Rowe\n\n-   [Generative Art and R](https://generative.substack.com/p/generative-art-and-r) by the Generative Arts Collective\n\n-   [Getting Started with Generative Art in R](https://towardsdatascience.com/getting-started-with-generative-art-in-r-3bc50067d34b)\n\n-   [Why Love Generative Art?](https://www.artnome.com/news/2018/8/8/why-love-generative-art) by Jason Bailey\n\n## Learn/do more\n\n-   R packages:\n\n    -   [aRtsy](https://koenderks.github.io/aRtsy/) by Koen Derks\n    -   [generativeart](https://github.com/cutterkom/generativeart) by Katharina Brunner\n    -   [flametree](https://flametree.djnavarro.net/) and [jasmines](https://jasmines.djnavarro.net/) bu Danielle Navarro\n    -   [ambient](https://ambient.data-imaginist.com/) and [particles](https://github.com/thomasp85/particles) by Thomas Lin Pedersen\n\n-   More aRtists: [rtistry art gallery](https://ijeamaka-a.shinyapps.io/rtistry_gallery/) by Ijeamaka Anyene\n\n-   A whole course on Generative Art by Danielle Navarro: [https://art-from-code.netlify.app](https://art-from-code.netlify.app/)\n",
    "supporting": [
      "23-generative-art_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}