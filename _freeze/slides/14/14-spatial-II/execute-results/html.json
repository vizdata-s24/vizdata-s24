{
  "hash": "b0ad868fc254f4221c05a381a5e7c33c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualizing geospatial data II\nsubtitle: Lecture 14\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Warm up\n\n## Announcements\n\n-   Project proposal work + HW 4 in lab tomorrow\n-   Ideas for \"Visualizing ...\" for later in the semester?\n\n## Setup {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(geodata)\nlibrary(ggrepel)\nlibrary(ggspatial)\nlibrary(patchwork)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n\n# Project 2\n\n## Project 2 - potential directions {.smaller}\n\n-   Present and visualize a technical topic in statistics or mathematics, e.g., Gradient descent, quadrature, autoregressive (AR) models, etc.\n\n-   Build a Shiny app that that has an Instagram-like user interface for applying filters, except not filters but themes for ggplots.\n\n-   Create an R package that provides functionality for a set of ggplot2 themes and/or color palettes.\n\n-   Build a generative art system.\n\n-   Do a deep dive into accessibility for data visualization and build a lesson plan for creating accessible visualizations with ggplot2, R Markdown, and generally within the R ecosystem.\n\n-   Create an interactive and/or animated spatio-temporal visualization on a topic of interest to you, e.g., redistricting, COVID-19, voter suppression, etc.\n\n-   Recreate art pieces with ggplot2.\n\n-   Make a data visualization telling a story and convert it to an illustration, presenting both the computational and artistic piece side by side.\n\n-   Build a dashboard.\n\n-   Or… Visualize a (non-TidyTuesday) dataset, answering a research question of interest to you.\n\n## Project 2 - all the details\n\n[https://vizdata.org/project/project-2.html](https://vizdata.org/project/project-2)\n\n::: callout-tip\nBrainstorm a bunch of ideas and discard them until you settle on a topic that everyone in the team is happy with and feels like a good choice for showcasing what you’ve learned in the class and how you can use that to learn something new and implement for your project.\n:::\n\n## Project 2 - inspiration\n\n![](images/smf.png){fig-align=\"center\" width=\"350\"}\n\n# Spatial data in R\n\n## Packages for geospatial data in R {.smaller}\n\n::: medium\nR has a rich package ecosystem for read/writing, manipulating, and analyzing geospatial data.\n\nSome core packages:\n\n-   **sp** - core classes for handling spatial data, additional utility functions - **Deprecated**\n\n-   **rgdal** - R interface to `gdal` (Geospatial Data Abstraction Library) for reading and writing spatial data - **Deprecated**\n\n-   **rgeos** - R interface to `geos` (Geometry Engine Open Source) library for querying and manipulating spatial data. Reading and writing WKT. - **Deprecated**\n\n-   **sf** - Combines the functionality of `sp`, `rgdal`, and `rgeos` into a single package based on tidy simple features.\n\n-   **raster** - classes and tools for handling spatial raster data.\n\n-   **stars** - Reading, manipulating, writing and plotting spatiotemporal arrays (rasters)\n:::\n\n::: aside\nSee more - [Spatial task view](http://cran.r-project.org/web/views/Spatial.html)\n:::\n\n## The sf package\n\n::: columns\n::: {.column width=\"70%\"}\nA package that provides simple features access for R:\n\n-   represents simple features as records in a `data.frame` or `tibble` with a `geometry` list-column\n-   represents natively in R all 17 simple feature types for all dimensions\n\nLearn more at [r-spatial.github.io/sf](https://r-spatial.github.io/sf).\n:::\n\n::: {.column width=\"30%\"}\n![](images/sf-hex.gif){fig-alt=\"Hex logo for sf\"}\n:::\n:::\n\n## Installing **sf** {.smaller}\n\nThis is the hardest part of using the **sf** package, difficulty comes from is dependence on several external libraries (`geos`, `gdal`, and `proj`).\n\n-   If using the containers, **sf** is already installed for you.\n-   If using your own machine:\n    -   *Windows* - installing from source works when Rtools is installed (system requirements are downloaded from rwinlib)\n    -   *MacOS* - install dependencies via homebrew: `gdal2`, `geos`, `proj`.\n    -   *Linux* - Install development packages for GDAL (\\>= 2.0.0), GEOS (\\>= 3.3.0) and Proj.4 (\\>= 4.8.0) from your package manager of choice.\n\nMore specific details are included in the [package README on github](https://github.com/r-spatial/sf#installing).\n\n## Simple Features for R\n\n![](images/sf.jpeg){fig-alt=\"Simple features for R\" fig-align=\"center\" width=\"700\"}\n\n::: aside\nIllustration by Allison Horst.\n:::\n\n## Simple Features\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n# Using sf\n\n## Get world data\n\nUsing the **rnaturalearth** package\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nclass(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n## What's in `world`?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"featurecla\" \"scalerank\"  \"labelrank\"  \"sovereignt\" \"sov_a3\"    \n  [6] \"adm0_dif\"   \"level\"      \"type\"       \"tlc\"        \"admin\"     \n [11] \"adm0_a3\"    \"geou_dif\"   \"geounit\"    \"gu_a3\"      \"su_dif\"    \n [16] \"subunit\"    \"su_a3\"      \"brk_diff\"   \"name\"       \"name_long\" \n [21] \"brk_a3\"     \"brk_name\"   \"brk_group\"  \"abbrev\"     \"postal\"    \n [26] \"formal_en\"  \"formal_fr\"  \"name_ciawf\" \"note_adm0\"  \"note_brk\"  \n [31] \"name_sort\"  \"name_alt\"   \"mapcolor7\"  \"mapcolor8\"  \"mapcolor9\" \n [36] \"mapcolor13\" \"pop_est\"    \"pop_rank\"   \"pop_year\"   \"gdp_md\"    \n [41] \"gdp_year\"   \"economy\"    \"income_grp\" \"fips_10\"    \"iso_a2\"    \n [46] \"iso_a2_eh\"  \"iso_a3\"     \"iso_a3_eh\"  \"iso_n3\"     \"iso_n3_eh\" \n [51] \"un_a3\"      \"wb_a2\"      \"wb_a3\"      \"woe_id\"     \"woe_id_eh\" \n [56] \"woe_note\"   \"adm0_iso\"   \"adm0_diff\"  \"adm0_tlc\"   \"adm0_a3_us\"\n [61] \"adm0_a3_fr\" \"adm0_a3_ru\" \"adm0_a3_es\" \"adm0_a3_cn\" \"adm0_a3_tw\"\n [66] \"adm0_a3_in\" \"adm0_a3_np\" \"adm0_a3_pk\" \"adm0_a3_de\" \"adm0_a3_gb\"\n [71] \"adm0_a3_br\" \"adm0_a3_il\" \"adm0_a3_ps\" \"adm0_a3_sa\" \"adm0_a3_eg\"\n [76] \"adm0_a3_ma\" \"adm0_a3_pt\" \"adm0_a3_ar\" \"adm0_a3_jp\" \"adm0_a3_ko\"\n [81] \"adm0_a3_vn\" \"adm0_a3_tr\" \"adm0_a3_id\" \"adm0_a3_pl\" \"adm0_a3_gr\"\n [86] \"adm0_a3_it\" \"adm0_a3_nl\" \"adm0_a3_se\" \"adm0_a3_bd\" \"adm0_a3_ua\"\n [91] \"adm0_a3_un\" \"adm0_a3_wb\" \"continent\"  \"region_un\"  \"subregion\" \n [96] \"region_wb\"  \"name_len\"   \"long_len\"   \"abbrev_len\" \"tiny\"      \n[101] \"homepart\"   \"min_zoom\"   \"min_label\"  \"max_label\"  \"label_x\"   \n[106] \"label_y\"    \"ne_id\"      \"wikidataid\" \"name_ar\"    \"name_bn\"   \n[111] \"name_de\"    \"name_en\"    \"name_es\"    \"name_fa\"    \"name_fr\"   \n[116] \"name_el\"    \"name_he\"    \"name_hi\"    \"name_hu\"    \"name_id\"   \n[121] \"name_it\"    \"name_ja\"    \"name_ko\"    \"name_nl\"    \"name_pl\"   \n[126] \"name_pt\"    \"name_ru\"    \"name_sv\"    \"name_tr\"    \"name_uk\"   \n[131] \"name_ur\"    \"name_vi\"    \"name_zh\"    \"name_zht\"   \"fclass_iso\"\n[136] \"tlc_diff\"   \"fclass_tlc\" \"fclass_us\"  \"fclass_fr\"  \"fclass_ru\" \n[141] \"fclass_es\"  \"fclass_cn\"  \"fclass_tw\"  \"fclass_in\"  \"fclass_np\" \n[146] \"fclass_pk\"  \"fclass_de\"  \"fclass_gb\"  \"fclass_br\"  \"fclass_il\" \n[151] \"fclass_ps\"  \"fclass_sa\"  \"fclass_eg\"  \"fclass_ma\"  \"fclass_pt\" \n[156] \"fclass_ar\"  \"fclass_jp\"  \"fclass_ko\"  \"fclass_vn\"  \"fclass_tr\" \n[161] \"fclass_id\"  \"fclass_pl\"  \"fclass_gr\"  \"fclass_it\"  \"fclass_nl\" \n[166] \"fclass_se\"  \"fclass_bd\"  \"fclass_ua\"  \"geometry\"  \n```\n\n\n:::\n:::\n\n\n\n## What's in `world`?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nattributes(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n  [1] \"featurecla\" \"scalerank\"  \"labelrank\"  \"sovereignt\" \"sov_a3\"    \n  [6] \"adm0_dif\"   \"level\"      \"type\"       \"tlc\"        \"admin\"     \n [11] \"adm0_a3\"    \"geou_dif\"   \"geounit\"    \"gu_a3\"      \"su_dif\"    \n [16] \"subunit\"    \"su_a3\"      \"brk_diff\"   \"name\"       \"name_long\" \n [21] \"brk_a3\"     \"brk_name\"   \"brk_group\"  \"abbrev\"     \"postal\"    \n [26] \"formal_en\"  \"formal_fr\"  \"name_ciawf\" \"note_adm0\"  \"note_brk\"  \n [31] \"name_sort\"  \"name_alt\"   \"mapcolor7\"  \"mapcolor8\"  \"mapcolor9\" \n [36] \"mapcolor13\" \"pop_est\"    \"pop_rank\"   \"pop_year\"   \"gdp_md\"    \n [41] \"gdp_year\"   \"economy\"    \"income_grp\" \"fips_10\"    \"iso_a2\"    \n [46] \"iso_a2_eh\"  \"iso_a3\"     \"iso_a3_eh\"  \"iso_n3\"     \"iso_n3_eh\" \n [51] \"un_a3\"      \"wb_a2\"      \"wb_a3\"      \"woe_id\"     \"woe_id_eh\" \n [56] \"woe_note\"   \"adm0_iso\"   \"adm0_diff\"  \"adm0_tlc\"   \"adm0_a3_us\"\n [61] \"adm0_a3_fr\" \"adm0_a3_ru\" \"adm0_a3_es\" \"adm0_a3_cn\" \"adm0_a3_tw\"\n [66] \"adm0_a3_in\" \"adm0_a3_np\" \"adm0_a3_pk\" \"adm0_a3_de\" \"adm0_a3_gb\"\n [71] \"adm0_a3_br\" \"adm0_a3_il\" \"adm0_a3_ps\" \"adm0_a3_sa\" \"adm0_a3_eg\"\n [76] \"adm0_a3_ma\" \"adm0_a3_pt\" \"adm0_a3_ar\" \"adm0_a3_jp\" \"adm0_a3_ko\"\n [81] \"adm0_a3_vn\" \"adm0_a3_tr\" \"adm0_a3_id\" \"adm0_a3_pl\" \"adm0_a3_gr\"\n [86] \"adm0_a3_it\" \"adm0_a3_nl\" \"adm0_a3_se\" \"adm0_a3_bd\" \"adm0_a3_ua\"\n [91] \"adm0_a3_un\" \"adm0_a3_wb\" \"continent\"  \"region_un\"  \"subregion\" \n [96] \"region_wb\"  \"name_len\"   \"long_len\"   \"abbrev_len\" \"tiny\"      \n[101] \"homepart\"   \"min_zoom\"   \"min_label\"  \"max_label\"  \"label_x\"   \n[106] \"label_y\"    \"ne_id\"      \"wikidataid\" \"name_ar\"    \"name_bn\"   \n[111] \"name_de\"    \"name_en\"    \"name_es\"    \"name_fa\"    \"name_fr\"   \n[116] \"name_el\"    \"name_he\"    \"name_hi\"    \"name_hu\"    \"name_id\"   \n[121] \"name_it\"    \"name_ja\"    \"name_ko\"    \"name_nl\"    \"name_pl\"   \n[126] \"name_pt\"    \"name_ru\"    \"name_sv\"    \"name_tr\"    \"name_uk\"   \n[131] \"name_ur\"    \"name_vi\"    \"name_zh\"    \"name_zht\"   \"fclass_iso\"\n[136] \"tlc_diff\"   \"fclass_tlc\" \"fclass_us\"  \"fclass_fr\"  \"fclass_ru\" \n[141] \"fclass_es\"  \"fclass_cn\"  \"fclass_tw\"  \"fclass_in\"  \"fclass_np\" \n[146] \"fclass_pk\"  \"fclass_de\"  \"fclass_gb\"  \"fclass_br\"  \"fclass_il\" \n[151] \"fclass_ps\"  \"fclass_sa\"  \"fclass_eg\"  \"fclass_ma\"  \"fclass_pt\" \n[156] \"fclass_ar\"  \"fclass_jp\"  \"fclass_ko\"  \"fclass_vn\"  \"fclass_tr\" \n[161] \"fclass_id\"  \"fclass_pl\"  \"fclass_gr\"  \"fclass_it\"  \"fclass_nl\" \n[166] \"fclass_se\"  \"fclass_bd\"  \"fclass_ua\"  \"geometry\"  \n\n$sf_column\n[1] \"geometry\"\n\n$agr\nfeaturecla  scalerank       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \n      <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       <NA> \nLevels: constant aggregate identity\n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n[235] 235 236 237 238 239 240 241 242\n\n$class\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n## sf geometry\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld |>\n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 242 features and 0 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -89.99893 xmax: 180 ymax: 83.59961\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                         geometry\n1  MULTIPOLYGON (((31.28789 -2...\n2  MULTIPOLYGON (((30.39609 -1...\n3  MULTIPOLYGON (((53.08564 16...\n4  MULTIPOLYGON (((104.064 10....\n5  MULTIPOLYGON (((-60.82119 9...\n6  MULTIPOLYGON (((12.43916 41...\n7  MULTIPOLYGON (((166.7458 -1...\n8  MULTIPOLYGON (((70.94678 42...\n9  MULTIPOLYGON (((-53.37061 -...\n10 MULTIPOLYGON (((162.9832 5....\n```\n\n\n:::\n:::\n\n\n\n## Map the world with sf\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nggplot(data = world) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Plays nicely with ggplot2\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(fill = \"cornsilk\", size = 0.2) +\n  labs(x = \"Longitude\", y = \"Latitude\", title = \"World map\") +\n  theme(panel.background = element_rect(\"lightblue\"))\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Plays nicely with ggplot2\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(aes(fill = pop_est)) +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"sqrt\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Projections with sf\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3-5\"}\nggplot(data = world) +\n  geom_sf() +\n  coord_sf(\n    crs = \"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs\"\n  )\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Scale bar and North arrow\n\nUsing the **ggspatial** package:\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(fill = \"cornsilk\") +\n  annotation_scale(location = \"bl\", width_hint = 0.4) +\n  annotation_north_arrow(\n    location = \"bl\", which_north = \"true\",\n    pad_x = unit(0.5, \"in\"), pad_y = unit(0.3, \"in\"),\n    style = north_arrow_fancy_orienteering\n  ) +\n  coord_sf(xlim = c(24, 45), ylim = c(32, 43))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale on map varies by more than 10%, scale bar may be inaccurate\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## The scale warning\n\n```         \nScale on map varies by more than 10%, scale bar may be inaccurate\n```\n\n> Note the warning of the inaccurate scale bar: since the map uses unprojected data in longitude/latitude (WGS84) on an equidistant cylindrical projection (all meridians being parallel), length in (kilo)meters on the map directly depends mathematically on the degree of latitude. Plots of small regions or projected data will often allow for more accurate scale bars.\n\n::: aside\nSource: [Drawing beautiful maps programmatically with R, sf and ggplot2 --- Part 1: Basics](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)\n:::\n\n## Reading, writing, and converting\n\n-   `sf`\n    -   `st_read()` / `st_write()` - Shapefile, GeoJSON, KML, ...\n    -   `read_sf()` / `write_sf()` - Same, supports tibbles ...\n    -   `st_as_sfc()` / `st_as_wkt()` - sf \\<-\\> WKT\n    -   `st_as_sfc()` / `st_as_binary()` - sf \\<-\\> WKB\n    -   `st_as_sfc()` / `as(x, \"Spatial\")` - sf \\<-\\> sp\n\n::: aside\nSee [sf vignette #2 - Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html).\n:::\n\n## Example data\n\nNorth Carolina counties, US airports, and US highways:\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc <- read_sf(\"data/nc_counties/\", quiet = TRUE)\nair <- read_sf(\"data/airports/\", quiet = TRUE)\nhwy <- read_sf(\"data/us_interstates/\", quiet = TRUE)\n```\n:::\n\n\n:::\n\n## NC Counties\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 100 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32186 ymin: 33.84175 xmax: -75.46003 ymax: 36.58815\nGeodetic CRS:  NAD83\n# A tibble: 100 × 9\n     AREA PERIMETER COUNTYP010 STATE COUNTY          FIPS  STATE_FIPS SQUARE_MIL\n    <dbl>     <dbl>      <dbl> <chr> <chr>           <chr> <chr>           <dbl>\n 1 0.112       1.61       1994 NC    Ashe County     37009 37               429.\n 2 0.0616      1.35       1996 NC    Alleghany Coun… 37005 37               236.\n 3 0.140       1.77       1998 NC    Surry County    37171 37               539.\n 4 0.0891      1.43       1999 NC    Gates County    37073 37               342.\n 5 0.0687      4.43       2000 NC    Currituck Coun… 37053 37               264.\n 6 0.119       1.40       2001 NC    Stokes County   37169 37               456.\n 7 0.0626      2.11       2002 NC    Camden County   37029 37               241.\n 8 0.115       1.46       2003 NC    Warren County   37185 37               444.\n 9 0.143       2.40       2004 NC    Northampton Co… 37131 37               551.\n10 0.0925      1.81       2005 NC    Hertford County 37091 37               356.\n# ℹ 90 more rows\n# ℹ 1 more variable: geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n\n:::\n\n## US Airports\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nair\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 940 features and 16 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -176.646 ymin: 17.70156 xmax: -64.80172 ymax: 71.28545\nGeodetic CRS:  NAD83\n# A tibble: 940 × 17\n   AIRPRTX010 FEATURE ICAO  IATA  AIRPT_NAME CITY  STATE STATE_FIPS COUNTY FIPS \n        <dbl> <chr>   <chr> <chr> <chr>      <chr> <chr> <chr>      <chr>  <chr>\n 1          0 AIRPORT KGON  GON   GROTON-NE… GROT… CT    09         NEW L… 09011\n 2          3 AIRPORT K6S5  6S5   RAVALLI C… HAMI… MT    30         RAVAL… 30081\n 3          4 AIRPORT KMHV  MHV   MOJAVE AI… MOJA… CA    06         KERN   06029\n 4          6 AIRPORT KSEE  SEE   GILLESPIE… SAN … CA    06         SAN D… 06073\n 5          7 AIRPORT KFPR  FPR   ST LUCIE … FORT… FL    12         ST LU… 12111\n 6          8 AIRPORT KRYY  RYY   COBB COUN… ATLA… GA    13         COBB   13067\n 7         10 AIRPORT KMKL  MKL   MC KELLAR… JACK… TN    47         MADIS… 47113\n 8         11 AIRPORT KCCR  CCR   BUCHANAN … CONC… CA    06         CONTR… 06013\n 9         13 AIRPORT KJYO  JYO   LEESBURG … LEES… VA    51         LOUDO… 51107\n10         15 AIRPORT KCAD  CAD   WEXFORD C… CADI… MI    26         WEXFO… 26165\n# ℹ 930 more rows\n# ℹ 7 more variables: TOT_ENP <dbl>, LATITUDE <dbl>, LONGITUDE <dbl>,\n#   ELEV <dbl>, ACT_DATE <chr>, CNTL_TWR <chr>, geometry <POINT [°]>\n```\n\n\n:::\n:::\n\n\n:::\n\n## US highways\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhwy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 233 features and 3 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: -7472582 ymin: 2911107 xmax: 2443707 ymax: 8208428\nProjected CRS: NAD83 / UTM zone 15N\n# A tibble: 233 × 4\n   ROUTE_NUM DIST_MILES DIST_KM                                         geometry\n   <chr>          <dbl>   <dbl>                            <MULTILINESTRING [m]>\n 1 I10          2449.   3941.   ((-1881200 4072307, -1879922 4072943, -1877750 …\n 2 I105           20.8    33.4  ((-1910156 5339585, -1910139 5339705, -1909706 …\n 3 I110           41.4    66.6  ((1054139 3388879, 1054287 3385988, 1054967 338…\n 4 I115            1.58    2.55 ((-1013796 5284243, -1013138 5283839, -1012546 …\n 5 I12            85.3   137.   ((680741.7 3366581, 682709.8 3366521, 683440.5 …\n 6 I124            1.73    2.79 ((1201467 3906285, 1201643 3905927, 1201658 390…\n 7 I126            3.56    5.72 ((1601502 3829718, 1602136 3829053, 1602406 382…\n 8 I129            3.1     4.99 ((217446 4705389, 217835.1 4705377, 219243.7 47…\n 9 I135           96.3   155.   ((96922.97 4313125, 96561.85 4310056, 96655.33 …\n10 I15          1436.   2311    ((-882875.7 5602902, -882998.3 5602422, -883277…\n# ℹ 223 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n## sf structure\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [100 × 9] (S3: sf/tbl_df/tbl/data.frame)\n $ AREA      : num [1:100] 0.1118 0.0616 0.1402 0.0891 0.0687 ...\n $ PERIMETER : num [1:100] 1.61 1.35 1.77 1.43 4.43 ...\n $ COUNTYP010: num [1:100] 1994 1996 1998 1999 2000 ...\n $ STATE     : chr [1:100] \"NC\" \"NC\" \"NC\" \"NC\" ...\n $ COUNTY    : chr [1:100] \"Ashe County\" \"Alleghany County\" \"Surry County\" \"Gates County\" ...\n $ FIPS      : chr [1:100] \"37009\" \"37005\" \"37171\" \"37073\" ...\n $ STATE_FIPS: chr [1:100] \"37\" \"37\" \"37\" \"37\" ...\n $ SQUARE_MIL: num [1:100] 429 236 539 342 264 ...\n $ geometry  :sfc_MULTIPOLYGON of length 100; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:1030, 1:2] -81.7 -81.7 -81.7 -81.6 -81.6 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:8] \"AREA\" \"PERIMETER\" \"COUNTYP010\" \"STATE\" ...\n```\n\n\n:::\n:::\n\n\n:::\n\n## sf classes\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc$geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nclass(st_geometry(nc))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc$geometry[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"         \n```\n\n\n:::\n:::\n\n\n\n## Projections / CRS\n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nst_crs(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n```\n\n\n:::\n:::\n\n\n:::\n\n::: aside\n[EPSG Geodetic Parameter Dataset](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset)\n:::\n\n## \n\n::: small\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nst_crs(hwy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 / UTM zone 15N \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 15N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 15N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-93,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    ID[\"EPSG\",26915]]\n```\n\n\n:::\n:::\n\n\n:::\n\n## Projections\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/projs-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n# Plotting with Base R\n\n## Base R plots\n\n-   Created with `plot()`\n-   Automatically applied methods based on class of object being plotted\n\n## All variables at once\n\n::: task\nWhere did these variables come from? Which of these plots don't make sense?\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(nc)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Geometry Plot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(st_geometry(nc), axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Graticules\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(nc[, \"AREA\"], axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Graticules\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(nc[, \"AREA\"], graticule = st_crs(nc), axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Graticules (EPSG:3631)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(st_transform(nc[, \"AREA\"], 3631), axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Graticules (EPSG:3631)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(st_transform(nc[, \"AREA\"], 3631), graticule = st_crs(nc), axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Graticules (EPSG:3631)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(st_transform(nc[, \"AREA\"], 3631), graticule = st_crs(3631), axes = TRUE)\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n# Plotting with ggplot2\n\n## `geom_sf()`\n\nNo automatic plotting:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(nc) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## `aes()`thetic mappings\n\nMore expressive: to plot variables, use aesthetic mappings as usual:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(nc) +\n  geom_sf(aes(fill = AREA))\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Many variables at once\n\nUsing **patchwork:**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_area <- ggplot(nc) + \n  geom_sf(aes(fill = AREA))\np_perimeter <- ggplot(nc) + \n  geom_sf(aes(fill = SQUARE_MIL)) +\n  theme(axis.text.y = element_blank())\np_area + p_perimeter\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-32-1.png){fig-align='center' width=3000}\n:::\n:::\n\n\n\n## ggplot2 + projections\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA))\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## ggplot2 + viridis\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA)) +\n  scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## ggplot2 + calculations\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA / PERIMETER^2)) +\n  scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Other color palettes (discrete)\n\n![](images/brewer.png){fig-align=\"center\" width=\"50%\"}\n\n::: aside\n[ColorBrewer 2.0](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) - color advice for maps\n:::\n\n## Picking palette breaks\n\n![](images/breaks1.png){fig-align=\"center\" width=\"80%\"}\n\n::: aside\nFrom [How to choose an interpolation for your color scale](https://blog.datawrapper.de/interpolation-for-color-scales-and-maps/)\n:::\n\n## Picking palette breaks\n\n![](images/breaks2.png){fig-align=\"center\" width=\"80%\"}\n\n::: aside\nFrom [How to choose an interpolation for your color scale](https://blog.datawrapper.de/interpolation-for-color-scales-and-maps/)\n:::\n\n# Layering maps\n\n## Data {.smaller}\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = nc) +\n  geom_sf() +\n  labs(title = \"NC Counties\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-36-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nggplot(data = air) +\n  geom_sf(color = \"blue\") +\n  labs(title = \"US Airports\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-36-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nggplot(data = hwy) +\n  geom_sf(color = \"orange\") +\n  labs(title = \"US Highways\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-36-3.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Layering\n\n::: task\n`ae-10` - Part 1: Recreate the following visualization.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-II_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=3000}\n:::\n:::\n\n\n\n## **Which counties have airports?**\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc_airports <- st_intersects(nc, air)\nstr(nc_airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 100\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 268\n $ : int 717\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 904\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 764\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 543\n $ : int 892\n $ : int 647\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 176\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 789\n $ : int 902\n $ : int(0) \n $ : int 377\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 407\n $ : int(0) \n $ : int(0) \n $ : int [1:2] 516 593\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int [1:2] 491 626\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 597\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 674\n  [list output truncated]\n - attr(*, \"predicate\")= chr \"intersects\"\n - attr(*, \"region.id\")= chr [1:100] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"remove_self\")= logi FALSE\n - attr(*, \"retain_unique\")= logi FALSE\n - attr(*, \"ncol\")= int 940\n - attr(*, \"class\")= chr [1:2] \"sgbp\" \"list\"\n```\n\n\n:::\n:::\n\n\n\n## Which counties have airports?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhas_airport <- map_lgl(nc_airports, ~ length(.) > 0)\nnc |> \n  slice(which(has_airport)) |> \n  pull(COUNTY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Forsyth County\"     \"Guilford County\"    \"Dare County\"       \n [4] \"Wake County\"        \"Pitt County\"        \"Catawba County\"    \n [7] \"Buncombe County\"    \"Wayne County\"       \"Mecklenburg County\"\n[10] \"Moore County\"       \"Cabarrus County\"    \"Lenoir County\"     \n[13] \"Craven County\"      \"Cumberland County\"  \"Onslow County\"     \n[16] \"New Hanover County\"\n```\n\n\n:::\n:::\n\n\n\n## Which counties have airports?\n\n::: task\n`ae-10` - Part 2: On the map of NC you made previously, highlight the counties that have airports.\n:::\n",
    "supporting": [
      "14-spatial-II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}