{
  "hash": "b79458dd902154080d885fb54e593c47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Shiny Dashboards\nsubtitle: Lecture 19\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n\n# Warm up\n\n## What is visualization about?\n\n![](images/airbnb-april-7.jpg)\n\n::: aside\nSource: [Mike Simonsen on X.com](https://x.com/mikesimonsen/status/1775683012598079639?s=20)\n:::\n\n# Building dashboards with Shiny\n\n## bslib\n\nModern UI toolkit for Shiny based on [Bootstrap](https://getbootstrap.com/):\n\n-   Creation of delightful and customizable [Shiny dashboards](https://rstudio.github.io/bslib/articles/dashboards.html) with [cards](https://rstudio.github.io/bslib/articles/cards.html), [value boxes](https://rstudio.github.io/bslib/articles/value-boxes.html), [sidebars](https://rstudio.github.io/bslib/articles/sidebars.html), etc.\n\n-   [Custom theming](https://rstudio.github.io/bslib/articles/theming.html)\n\n-   Use of modern versions of Bootstrap and [Bootswatch](https://bootswatch.com/)\n\nLearn more at [https://rstudio.github.io/bslib](https://rstudio.github.io/bslib/).\n\n## Demo\n\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://minecr.shinyapps.io/manager-survey-bslib?showcase=0\" width=\"100%\" height=\"650px\" data-external=\"1\"></iframe>\n:::\n\n\n\n## Livecoding - Cards\n\n::: task\nGo to the `ae-14` project and code along in `app-1.R` completing the given tasks in order.\n:::\n\n## Livecoding - Value boxes\n\n::: task\nGo to the `ae-14` project and code along in `app-2.R` completing the given tasks in order.\n:::\n\n# Reference\n\n## Reference\n\nThe code for the app can be found [here](https://github.com/vizdata-s24/vizdata-s24/blob/main/slides/19/manager-survey-bslib/app.R).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages ----------------------------------------------------------------\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(bslib)\nlibrary(bsicons)\n\n# Load data --------------------------------------------------------------------\n\nmanager_survey <- read_rds(\"data/manager-survey.rds\")\n\n# Find all industries ----------------------------------------------------------\n\nindustry_choices <- manager_survey |>\n  distinct(industry_other) |>\n  arrange(industry_other) |>\n  pull(industry_other)\n\n# Randomly select 3 industries to start with -----------------------------------\n\nselected_industry_choices <- sample(str_subset(industry_choices, \"Other\", negate = TRUE), 3)\n\n# Calculate overall average\n\noverall_average <- manager_survey |>\n  summarize(mean_salary = round(mean(annual_salary), 0)) |>\n  pull(mean_salary) |>\n  scales::dollar()\n\n# Define UI --------------------------------------------------------------------\n\nui <- page_navbar(\n  title = \"Ask a Manager\",\n  theme = bs_theme(\n    primary = \"#0577B1\",\n    secondary = \"#339898\",\n    info = \"#E89923\",\n    danger = \"#C84E00\"\n  ),\n  bg = \"#005587\",\n  sidebar = sidebar(\n    selectizeInput(\n      inputId = \"industry\",\n      label = \"Select up to 8 industies:\",\n      multiple = TRUE,\n      choices = industry_choices,\n      selected = selected_industry_choices,\n      options = list(plugins = \"remove_button\")\n    )\n  ),\n  header = layout_columns(\n    col_widths = c(3, -1, 3, -1, 3),\n    fill = FALSE,\n    uiOutput(\"selected_industries\"),\n    value_box(\n      title = \"Average salary for selected industries\",\n      value = textOutput(outputId = \"selected_average\"),\n      showcase = bs_icon(\"cash\"),\n      theme_color = \"secondary\",\n      fill = FALSE,\n      height = \"150px\"\n    ),\n    value_box(\n      title = \"Overall average salary\",\n      value = overall_average,\n      showcase = bs_icon(\"cash-stack\"),\n      theme_color = \"info\",\n      fill = FALSE,\n      height = \"150px\"\n    )\n  ),\n  nav_spacer(),\n  nav_panel(\n    title = \"Average salaries\",\n    card(\n      card_body(\n        plotOutput(outputId = \"avg_salary_plot\")\n      )\n    )\n  ),\n  nav_panel(\n    title = \"Individual salaries\",\n    layout_columns(\n      col_widths = c(12, 8, 4),\n      conditionalPanel(\n        condition = \"input.industry.length <= 8\",\n        card(\n          card_header(\"Zoom in to salaries between\"),\n          card_body(\n            sliderInput(\n              inputId = \"ylim\",\n              label = \"\",\n              min = 0,\n              value = c(0, 1000000),\n              max = max(manager_survey$annual_salary),\n              width = \"100%\"\n            )\n          )\n        )\n      ),\n      card(\n        card_body(\n          plotOutput(outputId = \"indiv_salary_plot\", brush = \"indiv_salary_brush\")\n        )\n      ),\n      card(\n        card_body(\n          tableOutput(outputId = \"indiv_salary_table\")\n        )\n      )\n    )\n  ),\n  nav_panel(\n    \"Data\",\n    card(card_body(DT::dataTableOutput(outputId = \"data\")))\n  ),\n  footer = p(\"Showing only results for those with salaries in USD who have provided information on their industry and highest level of education completed.\")\n)\n\n# Define server function -------------------------------------------------------\n\nserver <- function(input, output, session) {\n  # Number of selected industries\n  output$selected_industries <- renderUI({\n    value_box(\n      title = \"Number of selected industries\",\n      value = length(input$industry),\n      showcase = if_else(length(input$industry) <= 8, bs_icon(\"check\"), bs_icon(\"x-octagon\")),\n      theme_color = if_else(length(input$industry) <= 8, \"primary\", \"danger\"),\n      fill = FALSE,\n      height = \"150px\"\n    )\n  })\n\n  # Filter data for selected industries\n  manager_survey_filtered <- reactive({\n    manager_survey |>\n      filter(industry_other %in% input$industry)\n  })\n\n  # Selected average\n  output$selected_average <- renderText({\n    manager_survey_filtered() |>\n      summarize(mean_salary = round(mean(annual_salary), 0)) |>\n      pull(mean_salary) |>\n      scales::dollar()\n  })\n\n  # Make a table of filtered data\n  output$data <- DT::renderDataTable({\n    manager_survey_filtered() |>\n      select(\n        industry,\n        job_title,\n        annual_salary,\n        other_monetary_comp,\n        country,\n        overall_years_of_professional_experience,\n        years_of_experience_in_field,\n        highest_level_of_education_completed,\n        gender,\n        race\n      )\n  })\n\n  # Futher filter for salary range\n  observeEvent(input$industry, {\n    updateSliderInput(\n      inputId = \"ylim\",\n      min = min(manager_survey_filtered()$annual_salary),\n      max = max(manager_survey_filtered()$annual_salary),\n      value = c(\n        min(manager_survey_filtered()$annual_salary),\n        max(manager_survey_filtered()$annual_salary)\n      )\n    )\n  })\n\n  # Plot of jittered salaries from filtered data\n  output$indiv_salary_plot <- renderPlot({\n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n\n    ggplot(\n      manager_survey_filtered(),\n      aes(\n        x = highest_level_of_education_completed,\n        y = annual_salary,\n        color = industry\n      )\n    ) +\n      geom_jitter(size = 2, alpha = 0.6) +\n      theme_minimal(base_size = 18) +\n      scale_color_colorblind(labels = label_wrap_gen(20)) +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(\n        limits = input$ylim,\n        labels = label_dollar()\n      ) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Annual salary\",\n        color = \"Industry\"\n      )\n  })\n\n  # Linked brushing\n  output$indiv_salary_table <- renderTable(\n    {\n      validate(\n        need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n      )\n\n      brushedPoints(manager_survey_filtered(), input$indiv_salary_brush) |>\n        select(industry, highest_level_of_education_completed, annual_salary) |>\n        rename(\n          Industry = industry,\n          Education = highest_level_of_education_completed,\n          Salary = annual_salary\n        )\n    },\n    digits = 0\n  )\n\n  # Plot of average salaries from filtered data\n  output$avg_salary_plot <- renderPlot({\n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n\n    manager_survey_filtered() |>\n      group_by(industry, highest_level_of_education_completed) |>\n      summarise(\n        mean_annual_salary = mean(annual_salary, na.rm = TRUE),\n        .groups = \"drop\"\n      ) |>\n      ggplot(aes(\n        x = highest_level_of_education_completed,\n        y = mean_annual_salary,\n        group = industry,\n        color = industry\n      )) +\n      geom_line(linewidth = 1.5) +\n      theme_minimal(base_size = 18) +\n      scale_color_colorblind(labels = label_wrap_gen(20)) +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(labels = label_dollar()) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Mean annual salary\",\n        color = \"Industry\"\n      )\n  })\n}\n\n\n# Create the Shiny app object --------------------------------------------------\n\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}