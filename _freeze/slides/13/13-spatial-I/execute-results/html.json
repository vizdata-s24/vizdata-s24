{
  "hash": "a0cbf2ab65bac3f459ef3abb4e69ada9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualizing geospatial data I\nsubtitle: Lecture 13\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Warm up\n\n## Announcements\n\n-   Reading Quiz 4 due Tuesday after Spring Break\n-   Review Project 2 instructions before leaving for Spring Break and think about things you'd like to work on and let me know any team preferences (by Friday of this week)\n-   No class on Thursday, additonal office hours by Eli during class time in Old Chem 203\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(mapproj)\nlibrary(sf)\nlibrary(geofacet)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n\n# Projections\n\n## Visualizing geographic areas {.smaller}\n\nWithout any projection, on the cartesian coordinate system\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld_map <- ggplot(map_data(\"world\"), aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"white\", color = \"#3c3b6e\", linewidth = 0.3) +\n  labs(x = NULL, y = NULL)\n\nworld_map\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Mercator projection {.smaller}\n\nMeridians are equally spaced and vertical, parallels are horizontal lines whose spacing increases the further we move away from the equator\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nworld_map +\n  coord_map(projection = \"mercator\")\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Mercator projection\n\n::: hand\nwithout the weird straight lines through the earth!\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nworld_map +\n  coord_map(\n    projection = \"mercator\", \n    xlim = c(-180, 180)\n    )\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=55%}\n:::\n:::\n\n\n\n## Sinusoidal projection\n\nParallels are equally spaced\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nworld_map +\n  coord_map(projection = \"sinusoidal\", xlim = c(-180, 180))\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Orthographic projection\n\nViewed from infinity\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nworld_map +\n  coord_map(projection = \"orthographic\")\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Mollweide projection\n\nEquator is represented as a straight horizontal line perpendicular to a central meridian that is one-half the equator's length, trades accuracy of angle and shape for accuracy of proportions in area\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nworld_map +\n  coord_map(projection = \"mollweide\", xlim = c(-180, 180))\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Visualizing distances\n\n::: task\nDraw a line between Istanbul and Los Angeles.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncities <- tribble(\n  ~city,         ~long,    ~lat,\n  \"istanbul\",    28.9784,  41.0082,\n  \"los angeles\", -118.243, 34.0522,\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n## Visualizing distances\n\nAs if the earth is flat:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Visualizing distances\n\nBased on a spherical model of the earth:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/both-distances-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Intermediate points on the great circle\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncities <- tribble(\n  ~city,         ~long,    ~lat,\n  \"istanbul\",    28.9784,  41.0082,\n  \"los angeles\", -118.243, 34.0522,\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngc <- geosphere::gcIntermediate(\n  p1 = cities |> filter(city == \"istanbul\")    |> select(-city), \n  p2 = cities |> filter(city == \"los angeles\") |> select(-city), \n  n = 100, \n  addStartEnd = TRUE\n  ) |>\n  as_tibble()\n```\n:::\n\n\n\n## Intermediate points on the great circle\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 102 × 2\n     lon   lat\n   <dbl> <dbl>\n 1  29.0  41.0\n 2  28.4  41.9\n 3  27.8  42.8\n 4  27.1  43.6\n 5  26.5  44.5\n 6  25.8  45.3\n 7  25.1  46.2\n 8  24.4  47.0\n 9  23.7  47.9\n10  22.9  48.7\n# ℹ 92 more rows\n```\n\n\n:::\n:::\n\n\n\n## Plotting both distances\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|2-5|6-9|10-13|14\"}\nworld_map +\n  geom_point(\n    data = cities, aes(x = long, y = lat, group = NULL),\n    size = 2, color = \"red\"\n  ) +\n  geom_line(\n    data = cities, aes(x = long, y = lat, group = NULL),\n    linewidth = 1, color = \"red\"\n  ) +\n  geom_line(\n    data = gc, aes(x = lon, y = lat, group = NULL),\n    linewidth = 1, color = \"red\", linetype = \"dashed\"\n  ) +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180))\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Another distance between two points\n\n::: task\nHow long does it take to fly from the Western most point in the US to the Eastern most point? Guess.\n:::\n\n## Dateline\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n# Geospatial data in the real world: <br> Freedom index\n\n## Freedom index\n\n-   Since 1973, Freedom House has assessed the condition of political rights and civil liberties around the world.\n\n-   It is used on a regular basis by policymakers, journalists, academics, activists, and many others.\n\n. . .\n\n::: {.callout-warning icon=\"false\"}\n## Bias warning\n\n\"Freedom Index\" from any source have potential bias and is prone to miscalculations. While the index appears to cover many social issues including freedom of religion, expression, etc. this data (like any data) should be approached with skepticism. Quantifying complex issues like these is difficult and the process can oversimplify difficult to record/measure political nuances.\n:::\n\n::: aside\nSource: <https://freedomhouse.org/report/freedom-world>\n:::\n\n## Data {.smaller}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom <- read_csv(\"data/freedom-2022.csv\", na = c(\"\", \"-\")) |>\n  drop_na()\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 4\n   country                pr    cl status\n   <chr>               <dbl> <dbl> <chr> \n 1 Afghanistan             7     7 NF    \n 2 Albania                 3     3 PF    \n 3 Algeria                 6     5 NF    \n 4 Andorra                 1     1 F     \n 5 Angola                  6     5 NF    \n 6 Antigua and Barbuda     2     2 F     \n 7 Argentina               2     2 F     \n 8 Armenia                 4     4 PF    \n 9 Australia               1     1 F     \n10 Austria                 1     1 F     \n# ℹ 185 more rows\n```\n\n\n:::\n:::\n\n\n\n-   `pr`: Political rights rating\n-   `cl`: Civil liberties rating\n-   `status`: The average of each pair of ratings on political rights and civil liberties determines the overall status of F (Free, 1.0 - 2.5), PF (Partly Free, 3.0 - 5.0), or NF (Not Free, 5.5 - 7.0)\n\n## Improve {.smaller}\n\n::: task\nThe following visualization shows the distribution civil liberties ratings (1 - greatest degree of freedom to 7 - smallest degree of freedom). This is, undoubtedly, not the best visualization we can make of these data. How can we improve it?\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n## Mapping the freedom data\n\n-   Obtain country boundaries and store as a data frame\n-   Join the freedom and country boundaries data frames\n-   Plot the country boundaries, and fill by freedom scores\n\n## `map_data()`\n\nThe `map_data()` function easily turns data from the maps package in to a data frame suitable for plotting with ggplot2:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld_map <- map_data(\"world\") |> as_tibble()\nworld_map\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 99,338 × 6\n    long   lat group order region subregion\n   <dbl> <dbl> <dbl> <int> <chr>  <chr>    \n 1 -69.9  12.5     1     1 Aruba  <NA>     \n 2 -69.9  12.4     1     2 Aruba  <NA>     \n 3 -69.9  12.4     1     3 Aruba  <NA>     \n 4 -70.0  12.5     1     4 Aruba  <NA>     \n 5 -70.1  12.5     1     5 Aruba  <NA>     \n 6 -70.1  12.6     1     6 Aruba  <NA>     \n 7 -70.0  12.6     1     7 Aruba  <NA>     \n 8 -70.0  12.6     1     8 Aruba  <NA>     \n 9 -69.9  12.5     1     9 Aruba  <NA>     \n10 -69.9  12.5     1    10 Aruba  <NA>     \n# ℹ 99,328 more rows\n```\n\n\n:::\n:::\n\n\n\n## Mapping the world {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(world_map, aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"gray\") +\n  coord_quickmap()\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n## Freedom and world map\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom |> select(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 1\n   country            \n   <chr>              \n 1 Afghanistan        \n 2 Albania            \n 3 Algeria            \n 4 Andorra            \n 5 Angola             \n 6 Antigua and Barbuda\n 7 Argentina          \n 8 Armenia            \n 9 Australia          \n10 Austria            \n# ℹ 185 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld_map |> select(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 99,338 × 1\n   region\n   <chr> \n 1 Aruba \n 2 Aruba \n 3 Aruba \n 4 Aruba \n 5 Aruba \n 6 Aruba \n 7 Aruba \n 8 Aruba \n 9 Aruba \n10 Aruba \n# ℹ 99,328 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Join freedom and world map\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom_map <- freedom |>\n  left_join(world_map, by = join_by(country == region))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(freedom_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 82,198\nColumns: 9\n$ country   <chr> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ pr        <dbl> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, …\n$ cl        <dbl> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, …\n$ status    <chr> \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", \"NF\", …\n$ long      <dbl> 74.89131, 74.84023, 74.76738, 74.73896, 74.72666, 74.66895, …\n$ lat       <dbl> 37.23164, 37.22505, 37.24917, 37.28564, 37.29072, 37.26670, …\n$ group     <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ order     <int> 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, …\n$ subregion <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n```\n\n\n:::\n:::\n\n\n\n## Mapping freedom {.smaller}\n\n::: task\nWhat is missing/misleading about the following map?\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(freedom_map, mapping = aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = cl)) +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180))\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n## Missing countries {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom |> \n  anti_join(world_map, by = c(\"country\" = \"region\")) |>\n  select(country) |>\n  print(n = 14)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 1\n   country                       \n   <chr>                         \n 1 Antigua and Barbuda           \n 2 Cabo Verde                    \n 3 Congo (Brazzaville)           \n 4 Congo (Kinshasa)              \n 5 Cote d'Ivoire                 \n 6 Eswatini                      \n 7 St. Kitts and Nevis           \n 8 St. Lucia                     \n 9 St. Vincent and the Grenadines\n10 The Gambia                    \n11 Trinidad and Tobago           \n12 Tuvalu                        \n13 United Kingdom                \n14 United States                 \n```\n\n\n:::\n:::\n\n\n\n## Data cleanup - `freedom`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom_updated <- freedom |>\n  mutate(country = case_when(\n    country == \"Cabo Verde\" ~ \"Cape Verde\",\n    country == \"Congo (Brazzaville)\" ~ \"Republic of Congo\",\n    country == \"Congo (Kinshasa)\" ~ \"Democratic Republic of the Congo\",\n    country == \"Cote d'Ivoire\" ~ \"Ivory Coast\",\n    country == \"St. Lucia\" ~ \"Saint Lucia\",\n    country == \"The Gambia\" ~ \"Gambia\",\n    country == \"United Kingdom\" ~ \"UK\",\n    country == \"United States\" ~ \"USA\",\n    .default = country\n    )\n  )\n```\n:::\n\n\n\n## Data cleanup - `world_map`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld_map_updated <- world_map |>\n  mutate(region = case_when(\n    region == \"Antigua\" ~ \"Antigua and Barbuda\",\n    region == \"Barbuda\" ~ \"Antigua and Barbuda\",\n    region == \"Saint Kitts\" ~ \"St. Kitts and Nevis\",\n    region == \"Nevis\" ~ \"St. Kitts and Nevis\",\n    region == \"Saint Vincent\" ~ \"St. Vincent and the Grenadines\",\n    region == \"Grenadines\" ~ \"St. Vincent and the Grenadines\",\n    region == \"Trinidad\" ~ \"Trinidad and Tobago\",\n    region == \"Tobago\" ~ \"Trinidad and Tobago\",\n    region == \"Swaziland\" ~ \"Eswatini\",\n    .default = region\n    )\n  )\n```\n:::\n\n\n\n## Check again\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfreedom_updated |> \n  anti_join(world_map_updated, by = join_by(country == region)) |>\n  select(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  country\n  <chr>  \n1 Tuvalu \n```\n\n\n:::\n:::\n\n\n\n. . .\n\nTuvalu, formerly known as the Ellice Islands, is an island country and microstate in the Polynesian subregion of Oceania in the Pacific Ocean. Its islands are situated about midway between Hawaii and Australia. Tuvalu is composed of three reef islands and six atolls.\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Tuvalu>\n:::\n\n## Let's map!\n\n::: task\nRecreate the following visualization in `ae-09`.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Highlights from livecoding\n\n-   When working through non-matching unique identifiers in a join, you might need to clean the data in both data frames being merged, depending on the context\n\n-   Two ways to surface polygons with `NA`s:\n\n    -   `left_join()` map to data, layering with map at the bottom, data on top\n    -   `left_join()` data to map, set `na.value` in `scale_fill_*()` to desired color\n\n-   Use `na.value = \"red\"` (or some other color that will stand out) to easily spot polygons with `NA`s\n\n# Geofaceting\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/geofacet-state-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Daily US vaccine data by state {.smaller}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nus_state_vaccinations <- read_csv(here::here(\"data/us_state_vaccinations.csv\")) |>\n  mutate(date = mdy(date)) |>\n  filter(year(date) == 2021)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nus_state_vaccinations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22,936 × 16\n   date       location total_vaccinations total_distributed people_vaccinated\n   <date>     <chr>                 <dbl>             <dbl>             <dbl>\n 1 2021-01-12 Alabama               78134            377025             70861\n 2 2021-01-13 Alabama               84040            378975             74792\n 3 2021-01-14 Alabama               92300            435350             80480\n 4 2021-01-15 Alabama              100567            444650             86956\n 5 2021-01-16 Alabama                  NA                NA                NA\n 6 2021-01-17 Alabama                  NA                NA                NA\n 7 2021-01-18 Alabama                  NA                NA                NA\n 8 2021-01-19 Alabama              130795            444650            114319\n 9 2021-01-20 Alabama              139200            483275            121113\n10 2021-01-21 Alabama              165919            493125            144429\n# ℹ 22,926 more rows\n# ℹ 11 more variables: people_fully_vaccinated_per_hundred <dbl>,\n#   total_vaccinations_per_hundred <dbl>, people_fully_vaccinated <dbl>,\n#   people_vaccinated_per_hundred <dbl>, distributed_per_hundred <dbl>,\n#   daily_vaccinations_raw <dbl>, daily_vaccinations <dbl>,\n#   daily_vaccinations_per_million <dbl>, share_doses_used <dbl>,\n#   total_boosters <dbl>, total_boosters_per_hundred <dbl>\n```\n\n\n:::\n:::\n\n\n\n::: aside\nSource: https://ourworldindata.org/us-states-vaccinations\n:::\n\n## Facet by location\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  us_state_vaccinations,\n  aes(x = date, y = people_fully_vaccinated_per_hundred)\n) +\n  geom_area() +\n  facet_wrap(~location)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 3279 rows containing non-finite outside the scale range\n(`stat_align()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-39-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Data cleaning\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nus_state_vaccinations <- us_state_vaccinations |>\n  mutate(location = if_else(location == \"New York State\", \"New York\", location)) |>\n  filter(location %in% c(state.name, \"District of Columbia\"))\n```\n:::\n\n\n\n## Geofacet by state\n\nUsing `geofacet::facet_geo()`:\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(us_state_vaccinations, \n       aes(x = date, y = people_fully_vaccinated_per_hundred)) +\n  geom_area() +\n  facet_geo(~ location) +\n  labs(\n    x = NULL, y = NULL,\n    title = \"COVID-19 vaccination rate in the US\",\n    subtitle = \"Daily number of people fully vaccinated in 2021, per hundred\",\n    caption = \"Source: Our World in Data\"\n  )\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-41-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Geofacet by state, with improvements\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|4-8|9\"}\nggplot(us_state_vaccinations, aes(x = date, y = people_fully_vaccinated_per_hundred, group = location)) +\n  geom_area() +\n  facet_geo(~location) +\n  scale_y_continuous(\n    limits = c(0, 100),\n    breaks = c(0, 50, 100),\n    minor_breaks = c(25, 75)\n    ) +\n  scale_x_date(breaks = c(ymd(\"2021-01-01\", \"2021-07-01\", \"2021-12-31\")), date_labels = \"%b\") +\n  labs(\n    x = NULL, y = NULL,\n    title = \"COVID-19 vaccination rate in the US\",\n    subtitle = \"Daily number of people fully vaccinated in 2021, per hundred\",\n    caption = \"Source: Our World in Data\"\n  ) +\n  theme(\n    strip.text.x = element_text(size = 7),\n    axis.text = element_text(size = 8),\n    plot.title.position = \"plot\"\n  )\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-42-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Bring in 2020 Presidential election results\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nelection_2020 <- read_csv(here::here(\"data/us-election-2020.csv\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nelection_2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 5\n   state                electoal_votes biden trump win       \n   <chr>                         <dbl> <dbl> <dbl> <chr>     \n 1 Alabama                           9     0     9 Republican\n 2 Alaska                            3     0     3 Republican\n 3 Arizona                          11    11     0 Democrat  \n 4 Arkansas                          6     0     6 Republican\n 5 California                       55    55     0 Democrat  \n 6 Colorado                          9     9     0 Democrat  \n 7 Connecticut                       7     7     0 Democrat  \n 8 Delaware                          3     3     0 Democrat  \n 9 District of Columbia              3     3     0 Democrat  \n10 Florida                          29     0    29 Republican\n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n\n## Geofacet by state + presidential election result {.smaller}\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|6|8|23\"}\nus_state_vaccinations |>\n  left_join(election_2020, by = c(\"location\" = \"state\")) |>\n  ggplot(aes(x = date, y = people_fully_vaccinated_per_hundred)) +\n  geom_area(aes(fill = win)) +\n  facet_geo(~location) +\n  scale_y_continuous(limits = c(0, 100), breaks = c(0, 50, 100), minor_breaks = c(25, 75)) +\n  scale_x_date(breaks = c(ymd(\"2021-01-01\", \"2021-07-01\", \"2021-12-31\")), date_labels = \"%b\") +\n  scale_fill_manual(values = c(\"#2D69A1\", \"#BD3028\")) +\n  labs(\n    x = NULL, y = NULL,\n    title = \"COVID-19 vaccination rate in the US\",\n    subtitle = \"Daily number of people fully vaccinated in 2021, per hundred\",\n    caption = \"Source: Our World in Data\",\n    fill = \"2020 Presidential\\nElection\"\n  ) +\n  theme(\n    strip.text.x = element_text(size = 7),\n    axis.text = element_text(size = 8),\n    plot.title.position = \"plot\",\n    legend.position = c(0.93, 0.15),\n    legend.text = element_text(size = 9), \n    legend.title = element_text(size = 11), \n    legend.background = element_rect(color = \"gray\", size = 0.5) \n  )\n```\n\n::: {.cell-output-display}\n![](13-spatial-I_files/figure-revealjs/unnamed-chunk-46-1.png){fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}