{
  "hash": "3cfe4be37ba2d8e5543cb71fa8a18379",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Data wrangling + tidying - I\nsubtitle: Lecture 3\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n# Warm up\n\n## Announcements\n\n-   Project 1 due date move to one 1 week later to accommodate a change in schedule in the library visit / historical data visualizations unit.\n-   HW 1 is posted, you will be working on it in lab tomorrow, due on Tue, Jan 30 at 5 pm. To submit, simply push your work to your GitHub repository.\n\n## From RQ reflections {.smaller}\n\n::: incremental\n-   More on the following upcoming in the class:\n\n    -   Scales (e.g., 400000 to 400K), themes and theme features (e.g., moving plot title), faceting\n    -   Plot sizing for including in a report, slide deck, etc.\n\n-   Which plots to use for numerical vs. categorical variables\n\n-   Strategies for figuring out which function to use\n\n-   Why do we need to set a seed for `geom_jitter()`?\n\n-   How to choose between `fill` and `color`?\n\n-   Review more examples of \"bad graphs\" with less obvious reasons as to why they are bad -- bring your (good and bad) plots to school!\n\n-   Suggestion: Time for random plotting/coding questions during/end of class\n:::\n\n## Today's focus\n\n::: columns\n::: {.column width=\"50%\"}\n-   Dive into data wrangling and tidying (for better/easier visualization) within a single data frame\n\n-   Peek at one more layer: statistics\n\n    -   So far we've reviewed data, aesthetics, geometries\n\n    -   We'll soon review facets and themes\n\n    -   In your HW you'll revisit coordinates\n:::\n\n::: {.column width=\"50%\"}\n![](images/gglayers.png)\n:::\n:::\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(countdown)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(glue)\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# Transforming and reshaping a single data frame\n\n## Scenario 1\n\n::: hand\nWe...\n\nhave a single data frame\n\nwant to slice it, and dice it, and juice it, and process it, so we can plot it\n:::\n\n## Data: Hotel bookings {.smaller}\n\n-   Data from two hotels: one resort and one city hotel\n-   Observations: Each row represents a hotel booking\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\nnames(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n\n\n:::\n:::\n\n\n## dplyr 101\n\n::: task\nWhich of the following (if any) are unfamiliar to you?\n:::\n\n-   `distinct()`\n-   `select()`, `relocate()`\n-   `arrange()`, `arrange(desc())`\n-   `slice()`, `slice_head()`, `slice_tail()`, `slice_sample()`\n-   `filter()`\n-   `mutate()`\n-   `summarize()`, `count()`\n\n## Average cost of daily stay\n\n::: task\n`ae-03` - Part 1: Let's recreate this visualization!\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-wrangling-tidying-I_files/figure-revealjs/daily-stay-cost-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Livecoding {.smaller}\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels |>\n  mutate(\n    arrival_date = glue::glue(\"{arrival_date_year}-{arrival_date_month}-{arrival_date_day_of_month}\"),\n    arrival_date = ymd(arrival_date)\n  ) |>\n  group_by(hotel, arrival_date) |>\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |>\n  ggplot(aes(x = arrival_date, y = mean_adr, group = hotel, color = hotel)) +\n  geom_line() +\n  scale_color_manual(values = c(\"cornsilk4\", \"deepskyblue3\")) +\n  scale_y_continuous(labels = label_dollar()) +\n  labs(\n    x = \"Arrival date\",\n    y = \"Mean average\\ndaily rate (USD)\",\n    color = NULL,\n    title = \"Cost of daily hotel stay\",\n    subtitle = \"July 2015 to August 2017\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  theme(\n    legend.position = c(0.15, 0.9),\n    legend.box.background = element_rect(\n      fill = \"white\",\n      color = \"white\"\n    ),\n    plot.subtitle = element_text(color = \"cornsilk4\"),\n    plot.caption = element_text(color = \"cornsilk4\")\n  )\n```\n:::\n\n\n## Monthly bookings {.smaller}\n\n::: panel-tabset\n## Question\n\n::: task\nCome up with a plan for making the following visualization and write the pseudocode.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-wrangling-tidying-I_files/figure-revealjs/monthly-bookings-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Submit\n\n\n```{=html}\n<iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/SJERMI?from=status-bar?\" width=\"100%\"></iframe>\n```\n\n:::\n\n## Monthly bookings {.smaller}\n\n::: task\n`ae-03` - Part 2: Let's recreate this visualization!\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-wrangling-tidying-I_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Livecoding {.smaller}\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels <- hotels |>\n  mutate(\n    arrival_date_month = fct_relevel(arrival_date_month, month.name),\n    season = case_when(\n      arrival_date_month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      arrival_date_month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      arrival_date_month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      TRUE ~ \"Fall\"\n    ),\n    season = fct_relevel(season, \"Winter\", \"Spring\", \"Summer\", \"Fall\")\n  )\n\nhotels |>\n  count(season, hotel, arrival_date_month) |>\n  ggplot(aes(x = arrival_date_month, y = n, group = hotel, linetype = hotel)) +\n  geom_line(linewidth = 0.8, color = \"cornsilk4\") +\n  geom_point(aes(shape = season, color = season), size = 4, show.legend = FALSE) +\n  scale_x_discrete(labels = month.abb) +\n  scale_color_colorblind() +\n  scale_shape_manual(values = c(\"circle\", \"square\", \"diamond\", \"triangle\")) +\n  labs(\n    x = \"Arrival month\", y = \"Number of bookings\", linetype = NULL,\n    title = \"Number of monthly bookings\",\n    subtitle = \"July 2015 to August 2017\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    legend.position = c(0.12, 0.9),\n    legend.box.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.subtitle = element_text(color = \"cornsilk4\"),\n    plot.caption = element_text(color = \"cornsilk4\")\n  )\n```\n:::\n",
    "supporting": [
      "03-wrangling-tidying-I_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}