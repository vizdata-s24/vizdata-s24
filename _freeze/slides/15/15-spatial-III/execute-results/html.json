{
  "hash": "38db42659f6345bdc12c264db0694fc2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualizing geospatial data III\nsubtitle: Lecture 15\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n## Announcements\n\n-   ...\n\n## From last time\n\nFinish up `ae-10`.\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(ggnewscale)\nlibrary(magick)\nlibrary(sf)\nlibrary(stars)\nlibrary(tmap)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# Using stars\n\n## Spatiotemporal arrays with stars\n\n> The **stars** package provides infrastructure for data cubes, array data with labeled dimensions, with emphasis on arrays where some of the dimensions relate to time and/or space.\n\n::: columns\n::: {.column width=\"50%\"}\nThree-dimensional cube: ![](images/cube1.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nMulti-dimensional hypercube: ![](images/cube2.png){fig-align=\"center\"}\n:::\n:::\n\n::: aside\nSource: <https://r-spatial.github.io/stars/>\n:::\n\n## Easter Island\n\n::: columns\n::: {.column width=\"30%\"}\nEaster Island (Rapa Nui / Isla de Pascua), a Chilean territory, is a remote volcanic island in Polynesia.\n:::\n\n::: {.column width=\"70%\"}\n![](images/Easter_Island_map-en.png){fig-align=\"center\"}\n:::\n:::\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Easter_Island>\n:::\n\n## File types\n\n-   `tif` files are geospatial raster data, e.g., elevation maps\n\n-   `gpkg` are geopackage files, modern version of shapefiles\n\n## Reading `tif` files\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nelev <- read_stars(\"data/easter_island/ei_elev.tif\")\nelev\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n             Min.  1st Qu.   Median     Mean  3rd Qu.     Max.   NA's\nei_elev.tif     0 56.98041 114.3601 143.5146 204.9752 506.8161 619721\ndimension(s):\n  from   to  offset delta                refsys point x/y\nx    1 1060  651409    25 WGS 84 / UTM zone 12S FALSE [x]\ny    1  832 7008921   -25 WGS 84 / UTM zone 12S FALSE [y]\n```\n\n\n:::\n:::\n\n\n## Plotting `tif` files\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_stars(data = elev)\n```\n\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plays nicely with ggplot2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_stars(data = elev) +\n  scale_fill_distiller(palette = \"RdYlGn\", na.value = \"transparent\")\n```\n\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Reading `gpkg` files\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nborder <- read_sf(\"data/easter_island/ei_border.gpkg\")\nborder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 653566.4 ymin: 6990751 xmax: 675697.4 ymax: 7006462\nProjected CRS: WGS 84 / UTM zone 12S\n# A tibble: 1 × 2\n  name                                                                      geom\n  <chr>                                                            <POLYGON [m]>\n1 Rapa Nui / Isla de Pascua ((668715.4 7002628, 668776.6 7002640, 668796 700268…\n```\n\n\n:::\n:::\n\n\n## Plotting `gpkg` files\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = border)\n```\n\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n##  {.center}\n\n::: hand\nA brief aside...\n:::\n\n## Put a flag on it!\n\nJust for fun...\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nei_plot <- ggplot() +\n  geom_sf(data = border, fill = \"white\")\n\nei_flag_image <- image_read(\"images/Flag_of_Rapa_Nui_Chile.png\")\nei_flag_raster <- as.raster(ei_flag_image)\n\nei_plot + annotation_raster(ei_flag_raster, xmin = 657000, xmax = 670000, ymin = 6996000, ymax = 7004000)\n```\n\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Easter_Island>\n:::\n\n## Finding the \"bounding box\"\n\n-   `ggplot_build()` takes the plot object, and performs all steps necessary to produce an object that can be rendered\n-   Outputs:\n    1.  a list of data frames (one for each layer)\n    2.  a panel object, which contains all information about axis limits, breaks etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nei_plot_build <- ggplot_build(ei_plot)\n```\n:::\n\n\n## `ggplot_build()` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nei_plot_build\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$data\n$data[[1]]\n                        geometry PANEL group     xmin     xmax    ymin    ymax\n1 POLYGON ((668715.4 7002628,...     1    -1 653566.4 675697.4 6990751 7006462\n  linetype alpha stroke  fill\n1        1    NA    0.5 white\n\n\n$layout\n<ggproto object: Class Layout, gg>\n    coord: <ggproto object: Class CoordSf, CoordCartesian, Coord, gg>\n        aspect: function\n        backtransform_range: function\n        clip: on\n        crs: NULL\n        datum: crs\n        default: TRUE\n        default_crs: NULL\n        determine_crs: function\n        distance: function\n        expand: TRUE\n        fixup_graticule_labels: function\n        get_default_crs: function\n        is_free: function\n        is_linear: function\n        label_axes: list\n        label_graticule: \n        labels: function\n        limits: list\n        lims_method: cross\n        modify_scales: function\n        ndiscr: 100\n        params: list\n        range: function\n        record_bbox: function\n        render_axis_h: function\n        render_axis_v: function\n        render_bg: function\n        render_fg: function\n        setup_data: function\n        setup_layout: function\n        setup_panel_guides: function\n        setup_panel_params: function\n        setup_params: function\n        train_panel_guides: function\n        transform: function\n        super:  <ggproto object: Class CoordSf, CoordCartesian, Coord, gg>\n    coord_params: list\n    facet: <ggproto object: Class FacetNull, Facet, gg>\n        compute_layout: function\n        draw_back: function\n        draw_front: function\n        draw_labels: function\n        draw_panels: function\n        finish_data: function\n        init_scales: function\n        map_data: function\n        params: list\n        setup_data: function\n        setup_params: function\n        shrink: TRUE\n        train_scales: function\n        vars: function\n        super:  <ggproto object: Class FacetNull, Facet, gg>\n    facet_params: list\n    finish_data: function\n    get_scales: function\n    layout: data.frame\n    map_position: function\n    panel_params: list\n    panel_scales_x: list\n    panel_scales_y: list\n    render: function\n    render_labels: function\n    reset_scales: function\n    resolve_label: function\n    setup: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    train_position: function\n    super:  <ggproto object: Class Layout, gg>\n\n$plot\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nattr(,\"class\")\n[1] \"ggplot_built\"\n```\n\n\n:::\n:::\n\n\n## Diving into the output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nei_plot_build$data[[1]]$xmin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 653566.4\n```\n\n\n:::\n\n```{.r .cell-code}\nei_plot_build$data[[1]]$xmax\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 675697.4\n```\n\n\n:::\n\n```{.r .cell-code}\nei_plot_build$data[[1]]$ymin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6990751\n```\n\n\n:::\n\n```{.r .cell-code}\nei_plot_build$data[[1]]$ymax\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7006462\n```\n\n\n:::\n:::\n\n\n##  {.center}\n\n::: hand\nBack to Easter Island...\n:::\n\n## Let's get more data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nroads <- read_sf(\"data/easter_island/ei_roads.gpkg\")\npoints <- read_sf(\"data/easter_island/ei_points.gpkg\")\n```\n:::\n\n\n## Layering with ggplot2\n\n::: task\n`ae-11`: Recreate the visualization below.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](15-spatial-III_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=2100}\n:::\n:::\n",
    "supporting": [
      "15-spatial-III_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}