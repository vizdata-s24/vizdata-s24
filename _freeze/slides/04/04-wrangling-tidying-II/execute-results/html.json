{
  "hash": "fa43d819468e937353088a59a033193a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Data wrangling + tidying - I\nsubtitle: Lecture 3\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n# Warm up\n\n## Check-in\n\n::: task\nAny high-level questions on HW 1?\n:::\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(countdown)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(glue)\nlibrary(gt)         # For \"great\" tables\nlibrary(MoMAColors) # For color palettes inspired by artworks at MomA\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# Transforming and reshaping a single data frame (cont.)\n\n## From last time: Monthly bookings {.smaller}\n\n::: task\nAny questions about recreating any aspect of this plot?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/monthly-bookings-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## From last time: Monthly bookings {.smaller}\n\nReveal below for code for creating the previous plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nhotels <- hotels |>\n  mutate(\n    arrival_date_month = fct_relevel(arrival_date_month, month.name),\n    season = case_when(\n      arrival_date_month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      arrival_date_month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      arrival_date_month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      TRUE ~ \"Fall\"\n    ),\n    season = fct_relevel(season, \"Winter\", \"Spring\", \"Summer\", \"Fall\")\n  )\n\nhotels |>\n  count(season, hotel, arrival_date_month) |>\n  ggplot(aes(x = arrival_date_month, y = n, group = hotel, linetype = hotel)) +\n  geom_line(linewidth = 0.8, color = \"cornsilk4\") +\n  geom_point(aes(shape = season, color = season), size = 4, show.legend = FALSE) +\n  scale_x_discrete(labels = month.abb) +\n  scale_color_colorblind() +\n  scale_shape_manual(values = c(\"circle\", \"square\", \"diamond\", \"triangle\")) +\n  labs(\n    x = \"Arrival month\", y = \"Number of bookings\", linetype = NULL,\n    title = \"Number of monthly bookings\",\n    subtitle = \"July 2015 to August 2017\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    legend.position = c(0.12, 0.9),\n    legend.box.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.subtitle = element_text(color = \"cornsilk4\"),\n    plot.caption = element_text(color = \"cornsilk4\")\n  )\n```\n:::\n\n\n## A few takeaways\n\n-   `forcats::fct_relevel()` in a `mutate()` is useful for custom ordering of levels of a factor variable\n\n-   `summarize()` after `group_by()` with multiple variables results in a message about the grouping structure of the resulting data frame -- the message can be suppressed by defining `.groups` (e.g., `.groups = \"drop\"` or `.groups = \"keep\"`)\n\n-   `summarize()` also lets you get away with being sloppy and not naming your new column, but that's not recommended!\n\n## Rowwise operations {.smaller}\n\n::: task\nWe want to calculate the total number of guests for each booking. Why does the following not work?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels |>\n  select(adults, children, babies) |>\n  mutate(guests = sum(c(adults, children, babies)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 4\n   adults children babies guests\n    <dbl>    <dbl>  <dbl>  <dbl>\n 1      2        0      0     NA\n 2      2        0      0     NA\n 3      1        0      0     NA\n 4      1        0      0     NA\n 5      2        0      0     NA\n 6      2        0      0     NA\n 7      2        0      0     NA\n 8      2        0      0     NA\n 9      2        0      0     NA\n10      2        0      0     NA\n# ℹ 119,380 more rows\n```\n\n\n:::\n:::\n\n\n## Rowwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nhotels |>\n  select(adults, children, babies) |>\n  rowwise() |>\n  mutate(guests = sum(c(adults, children, babies))) |>\n  filter(adults > 0, children > 0, babies > 0) # to show sum works\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 172 × 4\n# Rowwise: \n   adults children babies guests\n    <dbl>    <dbl>  <dbl>  <dbl>\n 1      2        1      1      4\n 2      2        1      1      4\n 3      2        1      1      4\n 4      2        1      1      4\n 5      2        1      1      4\n 6      2        1      1      4\n 7      2        1      1      4\n 8      2        2      1      5\n 9      2        2      1      5\n10      1        2      1      4\n# ℹ 162 more rows\n```\n\n\n:::\n:::\n\n\n## Columnwise operations {.smaller}\n\nUse `across()` combined with `summarise()` to calculate summary statistics for multiple columns at once:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|4\"}\nhotels |>\n  summarise(across(.cols = starts_with(\"stays\"), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  stays_in_weekend_nights stays_in_week_nights\n                    <dbl>                <dbl>\n1                   0.928                 2.50\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"|2|4\"}\nhotels |>\n  summarise(across(.cols = starts_with(\"stays\"), list(mean, sd))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 4\n$ stays_in_weekend_nights_1 <dbl> 0.9275986\n$ stays_in_weekend_nights_2 <dbl> 0.9986135\n$ stays_in_week_nights_1    <dbl> 2.500302\n$ stays_in_week_nights_2    <dbl> 1.908286\n```\n\n\n:::\n:::\n\n\n## Select helpers {.smaller}\n\n-   `starts_with()`: Starts with a prefix\n-   `ends_with()`: Ends with a suffix\n-   `contains()`: Contains a literal string\n-   `num_range()`: Matches a numerical range like x01, x02, x03\n-   `one_of()`: Matches variable names in a character vector\n-   `everything()`: Matches all variables\n-   `last_col()`: Select last variable, possibly with an offset\n-   `matches()`: Matches a regular expression (a sequence of symbols/characters expressing a string/pattern to be searched for within text)\n\n::: aside\nSee help for any of these functions for more info, e.g. `?everything`.\n:::\n\n## Columnwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nhotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(.cols = starts_with(\"stays\"), list(mean = mean, sd = sd), .names = \"{.fn}_{.col}\")\n  ) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4\nColumns: 6\nGroups: hotel [2]\n$ hotel                        <chr> \"City Hotel\", \"City Hotel\", \"Resort Hotel\", \"Resort…\n$ is_canceled                  <dbl> 0, 1, 0, 1\n$ mean_stays_in_weekend_nights <dbl> 0.8006836, 0.7875053, 1.1339070, 1.3352814\n$ sd_stays_in_weekend_nights   <dbl> 0.8615080, 0.9168195, 1.1442298, 1.1444040\n$ mean_stays_in_week_nights    <dbl> 2.122934, 2.266781, 3.008985, 3.440299\n$ sd_stays_in_week_nights      <dbl> 1.400799, 1.526787, 2.450714, 2.461699\n```\n\n\n:::\n:::\n\n\n## Columnwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nhotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(.cols = starts_with(\"stays\"), list(mean = mean, sd = sd), .names = \"{.fn}_{.col}\"),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  hotel   is_canceled mean_stays_in_weeken…¹ sd_stays_in_weekend_…² mean_stays_in_week_n…³\n  <chr>         <dbl>                  <dbl>                  <dbl>                  <dbl>\n1 City H…           0                  0.801                  0.862                   2.12\n2 City H…           1                  0.788                  0.917                   2.27\n3 Resort…           0                  1.13                   1.14                    3.01\n4 Resort…           1                  1.34                   1.14                    3.44\n# ℹ abbreviated names: ¹​mean_stays_in_weekend_nights, ²​sd_stays_in_weekend_nights,\n#   ³​mean_stays_in_week_nights\n# ℹ 1 more variable: sd_stays_in_week_nights <dbl>\n```\n\n\n:::\n:::\n\n\n## Setup for next example: `hotel_summary` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4-8|9\"}\nhotels_summary <- hotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(\n      .cols = starts_with(\"stays\"),\n      list(mean = mean),\n      .names = \"{.fn}_{.col}\"\n    ),\n    .groups = \"drop\"\n  )\n\nhotels_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  hotel        is_canceled mean_stays_in_weekend_nights mean_stays_in_week_nights\n  <chr>              <dbl>                        <dbl>                     <dbl>\n1 City Hotel             0                        0.801                      2.12\n2 City Hotel             1                        0.788                      2.27\n3 Resort Hotel           0                        1.13                       3.01\n4 Resort Hotel           1                        1.34                       3.44\n```\n\n\n:::\n:::\n\n\n## Mean number of stays {.smaller}\n\n::: panel-tabset\n## Question\n\n::: task\nWhich variables are plotted in the following visualization? Which aesthetics are they mapped to?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/stay-nights-1.png){fig-align='center' width=2700}\n:::\n:::\n\n\n## Submit\n\n\n```{=html}\n<iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/SJERMI?from=status-bar?\" width=\"100%\"></iframe>\n```\n\n:::\n\n## Mean number of stays\n\n::: task\n`ae-03` - Part 3: Let's recreate this visualization!\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=2700}\n:::\n:::\n\n\n## Livecoding\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels_summary |>\n  mutate(is_canceled = if_else(is_canceled == 0, \"Not canceled\", \"Canceled\")) |>\n  pivot_longer(\n    cols = starts_with(\"mean\"),\n    names_to = \"day_type\",\n    values_to = \"mean_stays\",\n    names_prefix = \"mean_stays_in_\"\n  ) |>\n  mutate(\n    day_type = if_else(str_detect(day_type, \"weekend\"), \"Weekend\", \"Weekday\")\n  ) |>\n  ggplot(aes(\n    x = str_wrap(is_canceled, 10), y = mean_stays,\n    group = hotel, color = hotel\n  )) +\n  geom_point(show.legend = FALSE) +\n  geom_line(aes(linetype = hotel), linewidth = 1) +\n  facet_wrap(~day_type) +\n  labs(\n    x = \"Booking status\",\n    y = \"Mean number of\\nnights of stay\",\n    color = NULL, linetype = NULL,\n    title = \"Mean number of stays\",\n    subtitle = \"By hotel type and booking status\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  scale_color_manual(values = c(\"cornsilk4\", \"deepskyblue3\")) +\n  scale_y_continuous(limits = c(0, 4), breaks = 0:4) +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n## tidyr 101\n\n::: columns\n::: {.column width=\"50%\"}\n-   `pivot_wider()` and `pivot_longer()`\n-   Incredibly useful for reshaping for plotting\n-   Lots of extra arguments to help with reshaping pain!\n-   Refer to [pivoting vignette](https://tidyr.tidyverse.org/articles/pivot.html) when needed\n:::\n\n::: {.column width=\"50%\"}\n![](images/tidyr-longer-wider.gif){fig-alt=\"Animation showing what pivoting longer and wider look like\" fig-align=\"center\"}\n:::\n:::\n\n# Stats\n\n## Stats \\< \\> geoms {.smaller}\n\n-   Statistical transformation (**stat**) transforms the data, typically by summarizing\n-   Many of ggplot2's stats are used behind the scenes to generate many important geoms\n\n| `stat`            | geom                                                |\n|-------------------|-----------------------------------------------------|\n| `stat_bin()`      | `geom_bar()`, `geom_freqpoly()`, `geom_histogram()` |\n| `stat_bin2d()`    | `geom_bin2d()`                                      |\n| `stat_bindot()`   | `geom_dotplot()`                                    |\n| `stat_binhex()`   | `geom_hex()`                                        |\n| `stat_boxplot()`  | `geom_boxplot()`                                    |\n| `stat_contour()`  | `geom_contour()`                                    |\n| `stat_quantile()` | `geom_quantile()`                                   |\n| `stat_smooth()`   | `geom_smooth()`                                     |\n| `stat_sum()`      | `geom_count()`                                      |\n\n## Layering with stats {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5-8\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(x = arrival_date_month, y = adr)) +\n  geom_point(alpha = 0.5) +\n  stat_summary(\n    geom = \"point\", fun = \"median\",\n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  ) +\n  facet_wrap(~hotel, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Alternate: layering with stats {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5-8\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(x = arrival_date_month, y = adr)) +\n  geom_point(alpha = 0.5) +\n  geom_point(\n    stat = \"summary\", fun = \"median\",\n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  ) +\n  facet_wrap(~hotel, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Statistical transformations {.smaller}\n\n::: task\nWhat can you say about the distribution of price from the following QQ plot?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4-5\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(sample = adr)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(y = \"adr\")\n```\n\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n# Bringing together multiple data frames\n\n## Scenario 2\n\n::: hand\nWe...\n\nhave **multiple** data frames\n\nwant to want to bring them together so we can plot them\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprofessions <- read_csv(\"data/professions.csv\")\ndates <- read_csv(\"data/dates.csv\")\nworks <- read_csv(\"data/works.csv\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## 10 women in science who changed the world {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"oefpbvwqip\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#oefpbvwqip table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#oefpbvwqip thead, #oefpbvwqip tbody, #oefpbvwqip tfoot, #oefpbvwqip tr, #oefpbvwqip td, #oefpbvwqip th {\n  border-style: none;\n}\n\n#oefpbvwqip p {\n  margin: 0;\n  padding: 0;\n}\n\n#oefpbvwqip .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#oefpbvwqip .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#oefpbvwqip .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#oefpbvwqip .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#oefpbvwqip .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#oefpbvwqip .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#oefpbvwqip .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#oefpbvwqip .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#oefpbvwqip .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#oefpbvwqip .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#oefpbvwqip .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#oefpbvwqip .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#oefpbvwqip .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#oefpbvwqip .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#oefpbvwqip .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oefpbvwqip .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#oefpbvwqip .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#oefpbvwqip .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#oefpbvwqip .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oefpbvwqip .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#oefpbvwqip .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oefpbvwqip .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#oefpbvwqip .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oefpbvwqip .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oefpbvwqip .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oefpbvwqip .gt_left {\n  text-align: left;\n}\n\n#oefpbvwqip .gt_center {\n  text-align: center;\n}\n\n#oefpbvwqip .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#oefpbvwqip .gt_font_normal {\n  font-weight: normal;\n}\n\n#oefpbvwqip .gt_font_bold {\n  font-weight: bold;\n}\n\n#oefpbvwqip .gt_font_italic {\n  font-style: italic;\n}\n\n#oefpbvwqip .gt_super {\n  font-size: 65%;\n}\n\n#oefpbvwqip .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#oefpbvwqip .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#oefpbvwqip .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#oefpbvwqip .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#oefpbvwqip .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#oefpbvwqip .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#oefpbvwqip .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"name\">name</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Ada Lovelace</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Marie Curie</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Janaki Ammal</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Chien-Shiung Wu</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Katherine Johnson</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Rosalind Franklin</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Vera Rubin</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Gladys West</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Flossie Wong-Staal</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Jennifer Doudna</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n::: aside\nSource: [Discover Magazine](https://www.discovermagazine.com/the-sciences/meet-10-women-in-science-who-changed-the-world)\n:::\n\n## Inputs\n\n::: panel-tabset\n### professions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprofessions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   name               profession                        \n   <chr>              <chr>                             \n 1 Ada Lovelace       Mathematician                     \n 2 Marie Curie        Physicist and Chemist             \n 3 Janaki Ammal       Botanist                          \n 4 Chien-Shiung Wu    Physicist                         \n 5 Katherine Johnson  Mathematician                     \n 6 Rosalind Franklin  Chemist                           \n 7 Vera Rubin         Astronomer                        \n 8 Gladys West        Mathematician                     \n 9 Flossie Wong-Staal Virologist and Molecular Biologist\n10 Jennifer Doudna    Biochemist                        \n```\n\n\n:::\n:::\n\n\n### dates\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  name               birth_year death_year\n  <chr>                   <dbl>      <dbl>\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Rosalind Franklin        1920       1958\n5 Vera Rubin               1928       2016\n6 Gladys West              1930         NA\n7 Flossie Wong-Staal       1947         NA\n8 Jennifer Doudna          1964         NA\n```\n\n\n:::\n:::\n\n\n### works\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  name               known_for                                                        \n  <chr>              <chr>                                                            \n1 Ada Lovelace       first computer algorithm                                         \n2 Marie Curie        theory of radioactivity,  first woman Nobel Prize win            \n3 Janaki Ammal       hybrid species, biodiversity protection                          \n4 Chien-Shiung Wu    experiment overturning theory of parity                          \n5 Katherine Johnson  orbital mechanics critical to sending first Americans into space \n6 Vera Rubin         existence of dark matter                                         \n7 Gladys West        mathematical modeling of the shape of the Earth                  \n8 Flossie Wong-Staal first to clone HIV and map its genes, which led to test for virus\n9 Jennifer Doudna    one of the primary developers of CRISPR                          \n```\n\n\n:::\n:::\n\n:::\n\n## Desired output {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   name               profession                         birth_year death_year known_for  \n   <chr>              <chr>                                   <dbl>      <dbl> <chr>      \n 1 Ada Lovelace       Mathematician                              NA         NA first comp…\n 2 Marie Curie        Physicist and Chemist                      NA         NA theory of …\n 3 Janaki Ammal       Botanist                                 1897       1984 hybrid spe…\n 4 Chien-Shiung Wu    Physicist                                1912       1997 experiment…\n 5 Katherine Johnson  Mathematician                            1918       2020 orbital me…\n 6 Rosalind Franklin  Chemist                                  1920       1958 <NA>       \n 7 Vera Rubin         Astronomer                               1928       2016 existence …\n 8 Gladys West        Mathematician                            1930         NA mathematic…\n 9 Flossie Wong-Staal Virologist and Molecular Biologist       1947         NA first to c…\n10 Jennifer Doudna    Biochemist                               1964         NA one of the…\n```\n\n\n:::\n:::\n\n\n## Inputs, reminder\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(professions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"name\"       \"profession\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"name\"       \"birth_year\" \"death_year\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"name\"      \"known_for\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnrow(professions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Joining data frames {.smaller}\n\n::: panel-tabset\n## Question\n\n::: task\nWhich, if any, `*_join()` function is unfamiliar?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsomething_join(x, y)\n```\n:::\n\n\n-   `left_join()`: all rows from x\n-   `right_join()`: all rows from y\n-   `full_join()`: all rows from both x and y\n-   `inner_join()`: all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches\n-   `semi_join()`: all rows from x where there are matching values in y, keeping just columns from x\n-   `anti_join()`: return all rows from x where there are not matching values in y, never duplicate rows of x\n-   ...\n\n## Vote\n\n\n```{=html}\n<iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/SJERMI?from=status-bar?\" width=\"100%\"></iframe>\n```\n\n:::\n\n## Setup\n\nFor the next few slides...\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `left_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/left-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `left_join()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprofessions |>\n  left_join(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   name               profession                         birth_year death_year\n   <chr>              <chr>                                   <dbl>      <dbl>\n 1 Ada Lovelace       Mathematician                              NA         NA\n 2 Marie Curie        Physicist and Chemist                      NA         NA\n 3 Janaki Ammal       Botanist                                 1897       1984\n 4 Chien-Shiung Wu    Physicist                                1912       1997\n 5 Katherine Johnson  Mathematician                            1918       2020\n 6 Rosalind Franklin  Chemist                                  1920       1958\n 7 Vera Rubin         Astronomer                               1928       2016\n 8 Gladys West        Mathematician                            1930         NA\n 9 Flossie Wong-Staal Virologist and Molecular Biologist       1947         NA\n10 Jennifer Doudna    Biochemist                               1964         NA\n```\n\n\n:::\n:::\n\n\n## `right_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/right-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `right_join()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprofessions |>\n  right_join(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  name               profession                         birth_year death_year\n  <chr>              <chr>                                   <dbl>      <dbl>\n1 Janaki Ammal       Botanist                                 1897       1984\n2 Chien-Shiung Wu    Physicist                                1912       1997\n3 Katherine Johnson  Mathematician                            1918       2020\n4 Rosalind Franklin  Chemist                                  1920       1958\n5 Vera Rubin         Astronomer                               1928       2016\n6 Gladys West        Mathematician                            1930         NA\n7 Flossie Wong-Staal Virologist and Molecular Biologist       1947         NA\n8 Jennifer Doudna    Biochemist                               1964         NA\n```\n\n\n:::\n:::\n\n\n## `full_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/full-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `full_join()` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndates |>\n  full_join(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   name               birth_year death_year known_for                                     \n   <chr>                   <dbl>      <dbl> <chr>                                         \n 1 Janaki Ammal             1897       1984 hybrid species, biodiversity protection       \n 2 Chien-Shiung Wu          1912       1997 experiment overturning theory of parity       \n 3 Katherine Johnson        1918       2020 orbital mechanics critical to sending first A…\n 4 Rosalind Franklin        1920       1958 <NA>                                          \n 5 Vera Rubin               1928       2016 existence of dark matter                      \n 6 Gladys West              1930         NA mathematical modeling of the shape of the Ear…\n 7 Flossie Wong-Staal       1947         NA first to clone HIV and map its genes, which l…\n 8 Jennifer Doudna          1964         NA one of the primary developers of CRISPR       \n 9 Ada Lovelace               NA         NA first computer algorithm                      \n10 Marie Curie                NA         NA theory of radioactivity,  first woman Nobel P…\n```\n\n\n:::\n:::\n\n\n## `inner_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/inner-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `inner_join()` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndates |>\n  inner_join(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  name               birth_year death_year known_for                                      \n  <chr>                   <dbl>      <dbl> <chr>                                          \n1 Janaki Ammal             1897       1984 hybrid species, biodiversity protection        \n2 Chien-Shiung Wu          1912       1997 experiment overturning theory of parity        \n3 Katherine Johnson        1918       2020 orbital mechanics critical to sending first Am…\n4 Vera Rubin               1928       2016 existence of dark matter                       \n5 Gladys West              1930         NA mathematical modeling of the shape of the Earth\n6 Flossie Wong-Staal       1947         NA first to clone HIV and map its genes, which le…\n7 Jennifer Doudna          1964         NA one of the primary developers of CRISPR        \n```\n\n\n:::\n:::\n\n\n## `semi_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/semi-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `semi_join()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndates |>\n  semi_join(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  name               birth_year death_year\n  <chr>                   <dbl>      <dbl>\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Vera Rubin               1928       2016\n5 Gladys West              1930         NA\n6 Flossie Wong-Staal       1947         NA\n7 Jennifer Doudna          1964         NA\n```\n\n\n:::\n:::\n\n\n## `anti_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/anti-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n     id value_x\n  <dbl> <chr>  \n1     3 x3     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `anti_join()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndates |>\n  anti_join(works)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  name              birth_year death_year\n  <chr>                  <dbl>      <dbl>\n1 Rosalind Franklin       1920       1958\n```\n\n\n:::\n:::\n\n\n## Putting it altogether {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscientists <- professions |>\n  left_join(dates) |>\n  left_join(works)\n\nscientists\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   name               profession                         birth_year death_year known_for  \n   <chr>              <chr>                                   <dbl>      <dbl> <chr>      \n 1 Ada Lovelace       Mathematician                              NA         NA first comp…\n 2 Marie Curie        Physicist and Chemist                      NA         NA theory of …\n 3 Janaki Ammal       Botanist                                 1897       1984 hybrid spe…\n 4 Chien-Shiung Wu    Physicist                                1912       1997 experiment…\n 5 Katherine Johnson  Mathematician                            1918       2020 orbital me…\n 6 Rosalind Franklin  Chemist                                  1920       1958 <NA>       \n 7 Vera Rubin         Astronomer                               1928       2016 existence …\n 8 Gladys West        Mathematician                            1930         NA mathematic…\n 9 Flossie Wong-Staal Virologist and Molecular Biologist       1947         NA first to c…\n10 Jennifer Doudna    Biochemist                               1964         NA one of the…\n```\n\n\n:::\n:::\n\n\n## `*_join()` functions\n\n-   From **dplyr**\n-   Incredibly useful for bringing datasets with common information (e.g., unique identifier) together\n-   Use `by` argument when the names of the column containing the common information are not the same across datasets\n-   Always check that the numbers of rows and columns of the result dataset makes sense\n-   Refer to [two-table verbs vignette](https://dplyr.tidyverse.org/articles/two-table.html) when needed\n\n## Visualizing joined data\n\nThe following plot displays some information from each of the three data frames:\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangling-tidying-II_files/figure-revealjs/scientists-gantt-plot-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## But first...\n\n::: task\nWhat is the plot in the previous slide called?\n:::\n\n## Livecoding {.smaller}\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Transform\"}\nscientists_longer <- scientists |>\n  mutate(\n    birth_year = case_when(\n      name == \"Ada Lovelace\" ~ 1815,\n      name == \"Marie Curie\" ~ 1867,\n      TRUE ~ birth_year\n    ),\n    death_year = case_when(\n      name == \"Ada Lovelace\" ~ 1852,\n      name == \"Marie Curie\" ~ 1934,\n      name == \"Flossie Wong-Staal\" ~ 2020,\n      TRUE ~ death_year\n    ),\n    status = if_else(is.na(death_year), \"alive\", \"deceased\"),\n    death_year = if_else(is.na(death_year), 2021, death_year),\n    known_for = if_else(name == \"Rosalind Franklin\", \"understanding of the molecular structures of DNA \", known_for)\n  ) |>\n  pivot_longer(\n    cols = contains(\"year\"),\n    names_to = \"year_type\",\n    values_to = \"year\"\n  ) |>\n  mutate(death_year_fake = if_else(year == 2021, TRUE, FALSE))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot\"}\nggplot(scientists_longer, \n       aes(x = year, y = fct_reorder(name, as.numeric(factor(profession))), group = name, color = profession)) +\n  geom_point(aes(shape = death_year_fake), show.legend = FALSE) +\n  geom_line(aes(linetype = status), show.legend = FALSE) +\n  scale_shape_manual(values = c(\"circle\", NA)) +\n  scale_linetype_manual(values = c(\"dashed\", \"solid\")) +\n  scale_color_moma_d(\"Lupi\") +\n  scale_x_continuous(expand = c(0.01, 0), breaks = seq(1820, 2020, 50)) +\n  geom_text(aes(y = name, label = known_for), x = 2030, show.legend = FALSE, hjust = 0) +\n  geom_text(aes(label = profession), x = 1809, y = Inf, hjust = 1, vjust = 1, show.legend = FALSE) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    x = \"Year\", y = NULL,\n    title = \"10 women in science who changed the world\",\n    caption = \"Source: Discover magazine\"\n  ) +\n  facet_grid(profession ~ ., scales = \"free_y\", space = \"free_y\", switch = \"x\") +\n  theme(\n    plot.margin = unit(c(1, 24, 1, 5), \"lines\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 2), # manual hack\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    axis.title.x = element_text(hjust = 0),\n    panel.background = element_rect(fill = \"#f0f0f0\", color = \"white\"),\n    panel.grid.major = element_line(color = \"white\", linewidth = 0.5)\n  )\n```\n:::\n",
    "supporting": [
      "04-wrangling-tidying-II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}