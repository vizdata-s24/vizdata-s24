{
  "hash": "0f84f763d11a3191ab05cc843cc1d842",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Interactive reporting + visualization with Shiny\nsubtitle: Lecture 18\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n\n# Warm up\n\n## Announcements\n\n-   HW 5 is posted, due next Tuesday, work on it in lab tomorrow\n\n## Setup {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n\n# Shiny: High level view\n\n## Shiny {.center}\n\nEvery Shiny app has a webpage that the user visits, <br> and behind this webpage there is a computer that serves this webpage by running R.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## Shiny {.center}\n\nWhen running your app locally, the computer serving your app is your computer.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Shiny {.center}\n\nWhen your app is deployed, the computer serving your app is a web server.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-3.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Shiny {.center}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-4.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Demo\n\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://gallery.shinyapps.io/goog-trend-index/?showcase=0\" width=\"100%\" height=\"650px\" data-external=\"1\"></iframe>\n:::\n\n\n\n# Anatomy of a Shiny app\n\n## What's in an app?\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\nui <- fluidPage()\n\n\nserver <- function(\n    input, \n    output, \n    session) {\n  ...\n}\n\n\nshinyApp(\n  ui = ui, \n  server = server\n)\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-   **User interface** controls the layout and appearance of app\n\n-   **Server function** contains instructions needed to build app\n:::\n:::\n\n## Data: Ask a manager\n\nSource: Ask a Manager Survey via [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-05-18)\n\n> This data does not reflect the general population; it reflects Ask a Manager readers who self-selected to respond, which is a very different group (as you can see just from the demographic breakdown below, which is very white and very female).\n\nSome findings [here](https://www.askamanager.org/2021/05/some-findings-from-24000-peoples-salaries.html).\n\n## Data: `manager`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmanager <- read_csv(\"data/survey.csv\")\nmanager\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26,232 × 18\n   timestamp          how_old_are_you industry  job_title additional_context_o…¹\n   <chr>              <chr>           <chr>     <chr>     <chr>                 \n 1 4/27/2021 11:02:10 25-34           Educatio… Research… <NA>                  \n 2 4/27/2021 11:02:22 25-34           Computin… Change &… <NA>                  \n 3 4/27/2021 11:02:38 25-34           Accounti… Marketin… <NA>                  \n 4 4/27/2021 11:02:41 25-34           Nonprofi… Program … <NA>                  \n 5 4/27/2021 11:02:42 25-34           Accounti… Accounti… <NA>                  \n 6 4/27/2021 11:02:46 25-34           Educatio… Scholarl… <NA>                  \n 7 4/27/2021 11:02:51 25-34           Publishi… Publishi… <NA>                  \n 8 4/27/2021 11:03:00 25-34           Educatio… Librarian High school, FT       \n 9 4/27/2021 11:03:01 45-54           Computin… Systems … Data developer/ETL De…\n10 4/27/2021 11:03:02 35-44           Accounti… Senior A… <NA>                  \n# ℹ 26,222 more rows\n# ℹ abbreviated name: ¹​additional_context_on_job_title\n# ℹ 13 more variables: annual_salary <dbl>, other_monetary_comp <dbl>,\n#   currency <chr>, currency_other <chr>, additional_context_on_income <chr>,\n#   country <chr>, state <chr>, city <chr>,\n#   overall_years_of_professional_experience <chr>,\n#   years_of_experience_in_field <chr>, …\n```\n\n\n:::\n:::\n\n\n\n## Ultimate goal\n\n::: {.medium .center-align}\n[https://minecr.shinyapps.io/manager-survey](https://minecr.shinyapps.io/manager-survey/)\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://minecr.shinyapps.io/manager-survey/?showcase=0\" width=\"2100\" height=\"550px\" data-external=\"1\"></iframe>\n:::\n\n\n\n# Interactive reporting with Shiny\n\n## Livecoding\n\n::: task\nGo to the `ae-13` project and code along in `app-1.R`.\n:::\n\n<br>\n\nHighlights:\n\n-   Data pre-processing\n-   Basic reactivity\n\n## Livecoding\n\n::: task\nGo to the `ae-21` project and code along in `app-2.R`.\n:::\n\n<br>\n\nHighlights:\n\n-   Data pre-processing outside of the app\n-   Tabsets\n-   Validation\n\n# Interactive visualizations with Shiny\n\n## Livecoding\n\n::: task\nGo to the `ae-13` project and code along in `app-3.R`.\n:::\n\n<br>\n\nHighlights:\n\n-   Conditional panels\n-   Linked brushing\n\n# Reference\n\n## Reference\n\nThe code for the app can be found [here](https://github.com/vizdata-s24/vizdata-s24/blob/main/slides/18/manager-survey/app.R).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load packages ----------------------------------------------------------------\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(countrycode)\n\n# Load data --------------------------------------------------------------------\n\nmanager_survey <- read_rds(\"data/manager-survey.rds\")\n\n# Find all industries ----------------------------------------------------------\n\nindustry_choices <- manager_survey |>\n  distinct(industry_other) |>\n  arrange(industry_other) |>\n  pull(industry_other)\n\n# Randomly select 3 industries to start with -----------------------------------\n\nselected_industry_choices <- sample(industry_choices, 3)\n\n# Define UI --------------------------------------------------------------------\n\nui <- fluidPage(\n  titlePanel(title = \"Ask a Manager\"),\n  sidebarLayout(\n    \n    # Sidebar panel\n    sidebarPanel(\n      checkboxGroupInput(\n        inputId = \"industry\",\n        label = \"Select up to 8 industies:\",\n        choices = industry_choices,\n        selected = selected_industry_choices\n      ),\n    ),\n    \n    # Main panel\n    mainPanel(\n      hr(),\n      \"Showing only results for those with salaries in USD who have provided information on their industry and highest level of education completed.\",\n      br(), br(),\n      textOutput(outputId = \"selected_industries\"),\n      hr(),\n      br(),\n      tabsetPanel(\n        type = \"tabs\",\n        tabPanel(\"Average salaries\", plotOutput(outputId = \"avg_salary_plot\")),\n        tabPanel(\n          \"Individual salaries\",\n          conditionalPanel(\n            condition = \"input.industry.length <= 8\",\n            sliderInput(\n              inputId = \"ylim\",\n              label = \"Zoom in to salaries between\",\n              min = 0,\n              value = c(0, 1000000),\n              max = max(manager_survey$annual_salary),\n              width = \"100%\"\n            )\n          ),\n          plotOutput(outputId = \"indiv_salary_plot\", brush = \"indiv_salary_brush\"),\n          tableOutput(outputId = \"indiv_salary_table\")\n        ),\n        tabPanel(\"Data\", DT::dataTableOutput(outputId = \"data\"))\n      )\n    )\n    \n  )\n)\n\n# Define server function -------------------------------------------------------\n\nserver <- function(input, output, session) {\n  \n  # Print number of selected industries\n  output$selected_industries <- reactive({\n    paste(\"You've selected\", length(input$industry), \"industries.\")\n  })\n  \n  # Filter data for selected industries\n  manager_survey_filtered <- reactive({\n    manager_survey |>\n      filter(industry_other %in% input$industry)\n  })\n  \n  # Make a table of filtered data\n  output$data <- DT::renderDataTable({\n    manager_survey_filtered() |>\n      select(\n        industry,\n        job_title,\n        annual_salary,\n        other_monetary_comp,\n        country,\n        overall_years_of_professional_experience,\n        years_of_experience_in_field,\n        highest_level_of_education_completed,\n        gender,\n        race\n      )\n  })\n  \n  # Futher filter for salary range\n  observeEvent(input$industry, {\n    updateSliderInput(\n      inputId = \"ylim\",\n      min = min(manager_survey_filtered()$annual_salary),\n      max = max(manager_survey_filtered()$annual_salary),\n      value = c(\n        min(manager_survey_filtered()$annual_salary),\n        max(manager_survey_filtered()$annual_salary)\n      )\n    )\n  })\n  \n  # Plot of jittered salaries from filtered data\n  output$indiv_salary_plot <- renderPlot({\n    \n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n    \n    ggplot(\n      manager_survey_filtered(),\n      aes(\n        x = highest_level_of_education_completed,\n        y = annual_salary,\n        color = industry\n      )\n    ) +\n      geom_jitter(size = 2, alpha = 0.6) +\n      theme_minimal(base_size = 16) +\n      theme(legend.position = \"top\") +\n      scale_color_colorblind() +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(\n        limits = input$ylim,\n        labels = label_dollar()\n      ) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Annual salary\",\n        color = \"Industry\",\n        title = \"Individual salaries\"\n      )\n  })\n  \n  # Linked brushing\n  output$indiv_salary_table <- renderTable({\n    brushedPoints(manager_survey_filtered(), input$indiv_salary_brush)\n  })\n  \n  # Plot of average salaries from filtered data\n  output$avg_salary_plot <- renderPlot({\n    \n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n    \n    manager_survey_filtered() |>\n      group_by(industry, highest_level_of_education_completed) |>\n      summarise(\n        mean_annual_salary = mean(annual_salary, na.rm = TRUE),\n        .groups = \"drop\"\n      ) |>\n      ggplot(aes(\n        x = highest_level_of_education_completed,\n        y = mean_annual_salary,\n        group = industry,\n        color = industry\n      )) +\n      geom_line(linewidth = 1) +\n      theme_minimal(base_size = 16) +\n      theme(legend.position = \"top\") +\n      scale_color_colorblind() +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(labels = label_dollar()) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Mean annual salary\",\n        color = \"Industry\",\n        title = \"Average salaries\"\n      )\n  })\n}\n\n\n# Create the Shiny app object --------------------------------------------------\n\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}